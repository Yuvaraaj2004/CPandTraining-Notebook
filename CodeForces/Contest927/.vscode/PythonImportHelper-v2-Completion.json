[
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "bisect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bisect",
        "description": "bisect",
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_right",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_right",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_right",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "lcm",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "gcd",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "SortedDict",
        "importPath": "sortedcontainers",
        "description": "sortedcontainers",
        "isExtraImport": true,
        "detail": "sortedcontainers",
        "documentation": {}
    },
    {
        "label": "SortedDict",
        "importPath": "sortedcontainers",
        "description": "sortedcontainers",
        "isExtraImport": true,
        "detail": "sortedcontainers",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sortedcontainers",
        "description": "sortedcontainers",
        "isExtraImport": true,
        "detail": "sortedcontainers",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappushpop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Solve",
        "importPath": "1941A",
        "description": "1941A",
        "isExtraImport": true,
        "detail": "1941A",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "1846B",
        "description": "1846B",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        l, f = [input() for i in range(3)], 0\n        for i in range(3):\n            d = defaultdict(int)\n            for j in range(3):\n                d[l[i][j]] += 1\n            # print(d)\n            if len(d) == 1:\n                if (v := list(d.items())[0][0]) != '.':",
        "detail": "1846B",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "1846C",
        "description": "1846C",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        a, b, c = list(map(int, input().split()))\n        l = [sorted(map(int, input().split())) for i in range(a)]\n        ans = []\n        for ind, i in enumerate(l):\n            s, p, j = 0, 0, 0\n            while j < len(i) and s+i[j] <= c:\n                s += i[j]\n                p += s",
        "detail": "1846C",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "1846D",
        "description": "1846D",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        a, b, c = list(map(int, input().split()))\n        b /= 2\n        l = [float('inf')]+sorted(map(int,\n                                      input().split()), reverse=True)\n        ans, base, m = 0, b*c, c/(b)\n        print(base, m, l)\n        for j in range(1, len(l)):\n            diff = l[j-1] - l[j]",
        "detail": "1846D",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "1846E1",
        "description": "1846E1",
        "peekOfCode": "def f(n, i):\n    if n == 0:\n        return ''\n    return f(n//i, i)+str(n % i)\nl, s = [], set()\nfor i in range(2, 36):\n    x, v = f'{i-1}{i-1}', 1\n    l.append([])\n    while v < 10**6:\n        x += f\"{i-1}\"",
        "detail": "1846E1",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "1846E1",
        "description": "1846E1",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n = int(input())\n        # print(n, [(i, f(n, i)) for i in range(2, n)])\nif __name__ == \"__main__\":\n    main()",
        "detail": "1846E1",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "1921D",
        "description": "1921D",
        "peekOfCode": "t = int(input())\nfor t in range(t):\n    ans = 0\n    a, b = map(int, input().split())\n    l1, l2 = sorted(list(map(int, input().split()))), sorted(\n        list(map(int, input().split())))\n    # print(l1, l2)\n    ai, aj, bi, bj = 0, a-1, 0, b-1\n    while ai <= aj:\n        v = [abs(l1[ai]-l2[bj]), abs(l1[aj]-l2[bi])]",
        "detail": "1921D",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "1923A",
        "description": "1923A",
        "peekOfCode": "t = int(input())\nfor t in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    i, j = 0, n-1\n    while i < len(l) and l[i] == 0:\n        i += 1\n    while i < len(l) and l[i] == 1:\n        i += 1\n    print(sum(l[i:]))",
        "detail": "1923A",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "1923B",
        "description": "1923B",
        "peekOfCode": "t = int(input())\nfor t in range(t):\n    n, k = map(int, input().split())\n    health=list(map(int,input))",
        "detail": "1923B",
        "documentation": {}
    },
    {
        "label": "mask",
        "kind": 5,
        "importPath": "1926D",
        "description": "1926D",
        "peekOfCode": "mask = (1 << 31)-1\nfor i in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    # print(mask)\n    ans = 0\n    s = {}\n    for j in c:\n        if s.get(mask ^ j, 0) > 0:\n            s[mask ^ j] -= 1",
        "detail": "1926D",
        "documentation": {}
    },
    {
        "label": "coin",
        "kind": 2,
        "importPath": "1934B",
        "description": "1934B",
        "peekOfCode": "def coin(n):\n    # print(n, end=' ')\n    if n < 3:\n        return n\n    if n in v:\n        return v[n]\n    ans = n\n    for i in coins:\n        # for i in coins:\n        if i > n:",
        "detail": "1934B",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "1934B",
        "description": "1934B",
        "peekOfCode": "d = {}\ncoins = [15, 10, 6, 3]\ncoins.reverse()\n# def dp(n):\n#     print(n, end=' ')\n#     if n <= 2:\n#         return n\n#     elif d.get(n, -1) != -1:\n#         return d[n]\n#     else:",
        "detail": "1934B",
        "documentation": {}
    },
    {
        "label": "coins",
        "kind": 5,
        "importPath": "1934B",
        "description": "1934B",
        "peekOfCode": "coins = [15, 10, 6, 3]\ncoins.reverse()\n# def dp(n):\n#     print(n, end=' ')\n#     if n <= 2:\n#         return n\n#     elif d.get(n, -1) != -1:\n#         return d[n]\n#     else:\n#         ans = n",
        "detail": "1934B",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "1935A",
        "description": "1935A",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n = int(input())\n        s = input()\n        if s <= s[::-1]:\n            print(s if not (n & 1) else s+s[::-1])\n        else:\n            print(s[::-1] if (n & 1) else s[::-1]+s)\n            # print()\nif __name__ == \"__main__\":",
        "detail": "1935A",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "1941A",
        "description": "1941A",
        "peekOfCode": "def Solve():\n    n, m, c = list(map(int, input().split()))\n    a, b = sorted(map(int, input().split())), sorted(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if a[i] > c:\n            break\n        else:\n            ans += bisect_right(b, c-a[i])\n    print(ans)",
        "detail": "1941A",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "1941B",
        "description": "1941B",
        "peekOfCode": "def f(n, l):\n    for i in range(n-2, -2, -1):\n        if i-1 >= 0:\n            l[i-1] -= (l[i])//2\n            if l[i-1] < 0:\n                return False\n        if i+1 < n:\n            l[i+1] -= (l[i])//2\n            if l[i+1] < 0:\n                return False",
        "detail": "1941B",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "1941B",
        "description": "1941B",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split()))\n        print('YES' if f(n, l[::]) or f(n, l[::-1]) else 'NO')\nif __name__ == \"__main__\":\n    main()",
        "detail": "1941B",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "1945A",
        "description": "1945A",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        a, b, c = list(map(int, input().split()))\n        if b % 3 != 0:\n            mod = b % 3\n            b += 3-mod\n            c -= 3-mod\n        # print(a, b, c)\n        print(a+ceil((b+c)/3) if c >= 0 else -1)\nif __name__ == \"__main__\":",
        "detail": "1945A",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "1946A",
        "description": "1946A",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n = int(input())\n        l = sorted((map(int, input().split())))\n        if n == 1:\n            print(1)\n        else:\n            c = 0\n            for i in range(n//2-(n & 1 == 0), n):\n                if l[i] == l[n//2-(n & 1 == 0)]:",
        "detail": "1946A",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "1946B",
        "description": "1946B",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n, k = list(map(int, input().split()))\n        l = list(map(int, input().split()))\n        s, mx = 0, 0\n        for i in range(n):\n            s += l[i]\n            if s < 0:\n                s = 0\n            mx = max(mx, s)",
        "detail": "1946B",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "1946B",
        "description": "1946B",
        "peekOfCode": "mod = 10**9+7\ndef main():\n    for i in range(int(input())):\n        n, k = list(map(int, input().split()))\n        l = list(map(int, input().split()))\n        s, mx = 0, 0\n        for i in range(n):\n            s += l[i]\n            if s < 0:\n                s = 0",
        "detail": "1946B",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "1946C",
        "description": "1946C",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n, k = list(map(int, input().split()))\n        edges = [[] for i in range(n+1)]\n        for i in range(n):\n            x, y = list(map(int, input().split()))\n            edges[x].append(y)\n        def dfs(node=1):\n            sz = 1\n            for i in edges[node]:",
        "detail": "1946C",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "19880",
        "description": "19880",
        "peekOfCode": "def GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL()\n    d = Counter([1]*a)\n    while len(d) == 1 and (v := max(d)) != a:\n        v, mn = d[i], min(d)\n        if v+mn <= b:\n            d[v+mn] += 1",
        "detail": "19880",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "19880",
        "description": "19880",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL()\n    d = Counter([1]*a)\n    while len(d) == 1 and (v := max(d)) != a:\n        v, mn = d[i], min(d)\n        if v+mn <= b:\n            d[v+mn] += 1\n            d[mn] -= 1",
        "detail": "19880",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "19880",
        "description": "19880",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL()\n    d = Counter([1]*a)\n    while len(d) == 1 and (v := max(d)) != a:\n        v, mn = d[i], min(d)\n        if v+mn <= b:\n            d[v+mn] += 1\n            d[mn] -= 1\n            d[v] -= 1",
        "detail": "19880",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "19880",
        "description": "19880",
        "peekOfCode": "def Solve():\n    a, b = GetL()\n    d = Counter([1]*a)\n    while len(d) == 1 and (v := max(d)) != a:\n        v, mn = d[i], min(d)\n        if v+mn <= b:\n            d[v+mn] += 1\n            d[mn] -= 1\n            d[v] -= 1\n            if d[mn] == 0:",
        "detail": "19880",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "19880",
        "description": "19880",
        "peekOfCode": "mod = 10**9+7\ndef GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL()\n    d = Counter([1]*a)\n    while len(d) == 1 and (v := max(d)) != a:\n        v, mn = d[i], min(d)\n        if v+mn <= b:",
        "detail": "19880",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "19930",
        "description": "19930",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    s = I()\n    d = Counter(s)\n    print(sum(min(v, n) for k, v in d.items() if k != '?'))\n    pass",
        "detail": "19930",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "19930",
        "description": "19930",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    s = I()\n    d = Counter(s)\n    print(sum(min(v, n) for k, v in d.items() if k != '?'))\n    pass\nif __name__ == \"__main__\":",
        "detail": "19930",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "19930",
        "description": "19930",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    s = I()\n    d = Counter(s)\n    print(sum(min(v, n) for k, v in d.items() if k != '?'))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "19930",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "19930",
        "description": "19930",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = II()\n    s = I()\n    d = Counter(s)\n    print(sum(min(v, n) for k, v in d.items() if k != '?'))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "19930",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "19930",
        "description": "19930",
        "peekOfCode": "def Solve():\n    n = II()\n    s = I()\n    d = Counter(s)\n    print(sum(min(v, n) for k, v in d.items() if k != '?'))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "19930",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "19930",
        "description": "19930",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    s = I()\n    d = Counter(s)\n    print(sum(min(v, n) for k, v in d.items() if k != '?'))",
        "detail": "19930",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "1993B",
        "description": "1993B",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL()\n    ans = 0\n    mx, e = 0, Counter()\n    for i in l:",
        "detail": "1993B",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "1993B",
        "description": "1993B",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL()\n    ans = 0\n    mx, e = 0, Counter()\n    for i in l:\n        if i & 1:",
        "detail": "1993B",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "1993B",
        "description": "1993B",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL()\n    ans = 0\n    mx, e = 0, Counter()\n    for i in l:\n        if i & 1:\n            mx = max(mx, i)",
        "detail": "1993B",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "1993B",
        "description": "1993B",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL()\n    ans = 0\n    mx, e = 0, Counter()\n    for i in l:\n        if i & 1:\n            mx = max(mx, i)\n        else:",
        "detail": "1993B",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "1993B",
        "description": "1993B",
        "peekOfCode": "def Solve():\n    n = II()\n    l = GL()\n    ans = 0\n    mx, e = 0, Counter()\n    for i in l:\n        if i & 1:\n            mx = max(mx, i)\n        else:\n            e[i] += 1",
        "detail": "1993B",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "1993B",
        "description": "1993B",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL()\n    ans = 0\n    mx, e = 0, Counter()",
        "detail": "1993B",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "1993C",
        "description": "1993C",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = sorted(GL())\n    mod = sorted(set([i % (2*b) for i in l]))\n    if mod[-1]-mod[0] < b:\n        v, mx = [], max(l)",
        "detail": "1993C",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "1993C",
        "description": "1993C",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = sorted(GL())\n    mod = sorted(set([i % (2*b) for i in l]))\n    if mod[-1]-mod[0] < b:\n        v, mx = [], max(l)\n        for i in l:",
        "detail": "1993C",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "1993C",
        "description": "1993C",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = sorted(GL())\n    mod = sorted(set([i % (2*b) for i in l]))\n    if mod[-1]-mod[0] < b:\n        v, mx = [], max(l)\n        for i in l:\n            v.append((mx-i)//(2*b)*(2*b)+(mx-i) % (b))",
        "detail": "1993C",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "1993C",
        "description": "1993C",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = sorted(GL())\n    mod = sorted(set([i % (2*b) for i in l]))\n    if mod[-1]-mod[0] < b:\n        v, mx = [], max(l)\n        for i in l:\n            v.append((mx-i)//(2*b)*(2*b)+(mx-i) % (b))\n        print(v, end=' ')",
        "detail": "1993C",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "1993C",
        "description": "1993C",
        "peekOfCode": "def Solve():\n    a, b = M()\n    l = sorted(GL())\n    mod = sorted(set([i % (2*b) for i in l]))\n    if mod[-1]-mod[0] < b:\n        v, mx = [], max(l)\n        for i in l:\n            v.append((mx-i)//(2*b)*(2*b)+(mx-i) % (b))\n        print(v, end=' ')\n    else:",
        "detail": "1993C",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "1993C",
        "description": "1993C",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = sorted(GL())\n    mod = sorted(set([i % (2*b) for i in l]))\n    if mod[-1]-mod[0] < b:",
        "detail": "1993C",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "19970",
        "description": "19970",
        "peekOfCode": "def GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    s = GetS()\n    c, i = [0, None], 0\n    while i < len(s):\n        j = i+1\n        while j < len(s) and s[j] == s[i]:\n            j += 1",
        "detail": "19970",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "19970",
        "description": "19970",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    s = GetS()\n    c, i = [0, None], 0\n    while i < len(s):\n        j = i+1\n        while j < len(s) and s[j] == s[i]:\n            j += 1\n        if c[0] < j-i-1:",
        "detail": "19970",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "19970",
        "description": "19970",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    s = GetS()\n    c, i = [0, None], 0\n    while i < len(s):\n        j = i+1\n        while j < len(s) and s[j] == s[i]:\n            j += 1\n        if c[0] < j-i-1:\n            c[0] = j-i-1",
        "detail": "19970",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "19970",
        "description": "19970",
        "peekOfCode": "def Solve():\n    s = GetS()\n    c, i = [0, None], 0\n    while i < len(s):\n        j = i+1\n        while j < len(s) and s[j] == s[i]:\n            j += 1\n        if c[0] < j-i-1:\n            c[0] = j-i-1\n            c[1] = i",
        "detail": "19970",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "19970",
        "description": "19970",
        "peekOfCode": "mod = 10**9+7\ndef GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    s = GetS()\n    c, i = [0, None], 0\n    while i < len(s):\n        j = i+1\n        while j < len(s) and s[j] == s[i]:",
        "detail": "19970",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "1997B",
        "description": "1997B",
        "peekOfCode": "def GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    a = [GetS(), GetS()]\n    ans = 0\n    for i in range(2):\n        for j in range(1, n-1):\n            if a[i][j] == '.' and a[i][j-1] == '.' and a[i][j+1] == '.' and a[not i][j-1] == 'x' and a[not i][j+1] == 'x' and a[not i][j] == '.':",
        "detail": "1997B",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "1997B",
        "description": "1997B",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    a = [GetS(), GetS()]\n    ans = 0\n    for i in range(2):\n        for j in range(1, n-1):\n            if a[i][j] == '.' and a[i][j-1] == '.' and a[i][j+1] == '.' and a[not i][j-1] == 'x' and a[not i][j+1] == 'x' and a[not i][j] == '.':\n                ans += 1",
        "detail": "1997B",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "1997B",
        "description": "1997B",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    a = [GetS(), GetS()]\n    ans = 0\n    for i in range(2):\n        for j in range(1, n-1):\n            if a[i][j] == '.' and a[i][j-1] == '.' and a[i][j+1] == '.' and a[not i][j-1] == 'x' and a[not i][j+1] == 'x' and a[not i][j] == '.':\n                ans += 1\n                # print(i, j)",
        "detail": "1997B",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "1997B",
        "description": "1997B",
        "peekOfCode": "def Solve():\n    n = GetI()\n    a = [GetS(), GetS()]\n    ans = 0\n    for i in range(2):\n        for j in range(1, n-1):\n            if a[i][j] == '.' and a[i][j-1] == '.' and a[i][j+1] == '.' and a[not i][j-1] == 'x' and a[not i][j+1] == 'x' and a[not i][j] == '.':\n                ans += 1\n                # print(i, j)\n            # print(a[i][j] == '.', a[i][j-1] == '.', a[i][j+1] ==",
        "detail": "1997B",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "1997B",
        "description": "1997B",
        "peekOfCode": "mod = 10**9+7\ndef GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    a = [GetS(), GetS()]\n    ans = 0\n    for i in range(2):\n        for j in range(1, n-1):",
        "detail": "1997B",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "1997C",
        "description": "1997C",
        "peekOfCode": "def GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n, s = GetI(), list(GetS())\n    ans, l = 0, []\n    for i in range(n):\n        if len(l) == 0 and s[i] == '_' or s[i] == '(':\n            s[i] = \"(\"\n            l.append(i)",
        "detail": "1997C",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "1997C",
        "description": "1997C",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n, s = GetI(), list(GetS())\n    ans, l = 0, []\n    for i in range(n):\n        if len(l) == 0 and s[i] == '_' or s[i] == '(':\n            s[i] = \"(\"\n            l.append(i)\n        else:",
        "detail": "1997C",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "1997C",
        "description": "1997C",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    n, s = GetI(), list(GetS())\n    ans, l = 0, []\n    for i in range(n):\n        if len(l) == 0 and s[i] == '_' or s[i] == '(':\n            s[i] = \"(\"\n            l.append(i)\n        else:\n            s[i] = \")\"",
        "detail": "1997C",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "1997C",
        "description": "1997C",
        "peekOfCode": "def Solve():\n    n, s = GetI(), list(GetS())\n    ans, l = 0, []\n    for i in range(n):\n        if len(l) == 0 and s[i] == '_' or s[i] == '(':\n            s[i] = \"(\"\n            l.append(i)\n        else:\n            s[i] = \")\"\n            ans += i-l.pop()",
        "detail": "1997C",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "1997C",
        "description": "1997C",
        "peekOfCode": "mod = 10**9+7\ndef GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n, s = GetI(), list(GetS())\n    ans, l = 0, []\n    for i in range(n):\n        if len(l) == 0 and s[i] == '_' or s[i] == '(':\n            s[i] = \"(\"",
        "detail": "1997C",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    pass",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    # for i in range(int(input())):\n    # Solve()",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    # for i in range(int(input())):\n    # Solve()\n    bound = exists([[1, 2, 3], [2, 4, 5]])\n    for i in range(4):",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    # for i in range(int(input())):\n    # Solve()\n    bound = exists([[1, 2, 3], [2, 4, 5]])\n    for i in range(4):\n        for j in range(4):",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    # for i in range(int(input())):\n    # Solve()\n    bound = exists([[1, 2, 3], [2, 4, 5]])\n    for i in range(4):\n        for j in range(4):\n            p(i, j, bound(i, j))",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "def Solve():\n    pass\nif __name__ == \"__main__\":\n    # for i in range(int(input())):\n    # Solve()\n    bound = exists([[1, 2, 3], [2, 4, 5]])\n    for i in range(4):\n        for j in range(4):\n            p(i, j, bound(i, j))",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "1997D",
        "description": "1997D",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "1997D",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "19990",
        "description": "19990",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    print(n % 10+n//10 % 10)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "19990",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "19990",
        "description": "19990",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    print(n % 10+n//10 % 10)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "19990",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "19990",
        "description": "19990",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    print(n % 10+n//10 % 10)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "19990",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "19990",
        "description": "19990",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = int(input())\n    print(n % 10+n//10 % 10)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "19990",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "19990",
        "description": "19990",
        "peekOfCode": "def Solve():\n    n = int(input())\n    print(n % 10+n//10 % 10)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "19990",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "19990",
        "description": "19990",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    print(n % 10+n//10 % 10)\n    pass",
        "detail": "19990",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "1999B",
        "description": "1999B",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    a, b = [l[0], l[1]], [l[2], l[3]]\n    ans = 0\n    def f(x, y):\n        # print(x, y)",
        "detail": "1999B",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "1999B",
        "description": "1999B",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    a, b = [l[0], l[1]], [l[2], l[3]]\n    ans = 0\n    def f(x, y):\n        # print(x, y)\n        return 0 if x[0] == y[0] else (1 if x[0] > y[0] else -1)+(0 if x[1] == y[1] else (1 if x[1] > y[1] else -1))",
        "detail": "1999B",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "1999B",
        "description": "1999B",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    a, b = [l[0], l[1]], [l[2], l[3]]\n    ans = 0\n    def f(x, y):\n        # print(x, y)\n        return 0 if x[0] == y[0] else (1 if x[0] > y[0] else -1)+(0 if x[1] == y[1] else (1 if x[1] > y[1] else -1))\n    val = [0, 0]",
        "detail": "1999B",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "1999B",
        "description": "1999B",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    l = GL()\n    a, b = [l[0], l[1]], [l[2], l[3]]\n    ans = 0\n    def f(x, y):\n        # print(x, y)\n        return 0 if x[0] == y[0] else (1 if x[0] > y[0] else -1)+(0 if x[1] == y[1] else (1 if x[1] > y[1] else -1))\n    val = [0, 0]\n    for x in (a, a[::-1]):",
        "detail": "1999B",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "1999B",
        "description": "1999B",
        "peekOfCode": "def Solve():\n    l = GL()\n    a, b = [l[0], l[1]], [l[2], l[3]]\n    ans = 0\n    def f(x, y):\n        # print(x, y)\n        return 0 if x[0] == y[0] else (1 if x[0] > y[0] else -1)+(0 if x[1] == y[1] else (1 if x[1] > y[1] else -1))\n    val = [0, 0]\n    for x in (a, a[::-1]):\n        for y in (b, b[::-1]):",
        "detail": "1999B",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "1999B",
        "description": "1999B",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    a, b = [l[0], l[1]], [l[2], l[3]]\n    ans = 0",
        "detail": "1999B",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "1999C",
        "description": "1999C",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s, m = M()\n    last, f = 0, False\n    for i in range(n):\n        a, b = M()\n        if a-last >= s:",
        "detail": "1999C",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "1999C",
        "description": "1999C",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s, m = M()\n    last, f = 0, False\n    for i in range(n):\n        a, b = M()\n        if a-last >= s:\n            f = True",
        "detail": "1999C",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "1999C",
        "description": "1999C",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s, m = M()\n    last, f = 0, False\n    for i in range(n):\n        a, b = M()\n        if a-last >= s:\n            f = True\n        last = b",
        "detail": "1999C",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "1999C",
        "description": "1999C",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, s, m = M()\n    last, f = 0, False\n    for i in range(n):\n        a, b = M()\n        if a-last >= s:\n            f = True\n        last = b\n    if m-last >= s:",
        "detail": "1999C",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "1999C",
        "description": "1999C",
        "peekOfCode": "def Solve():\n    n, s, m = M()\n    last, f = 0, False\n    for i in range(n):\n        a, b = M()\n        if a-last >= s:\n            f = True\n        last = b\n    if m-last >= s:\n        f = True",
        "detail": "1999C",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "1999C",
        "description": "1999C",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s, m = M()\n    last, f = 0, False\n    for i in range(n):\n        a, b = M()",
        "detail": "1999C",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "1999D",
        "description": "1999D",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = list(I()), (I())\n    l = 0\n    for ind, i in enumerate(a):\n        if i == '?':\n            a[ind] = b[l] if l < len(b) else 'a'",
        "detail": "1999D",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "1999D",
        "description": "1999D",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = list(I()), (I())\n    l = 0\n    for ind, i in enumerate(a):\n        if i == '?':\n            a[ind] = b[l] if l < len(b) else 'a'\n            l += 1",
        "detail": "1999D",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "1999D",
        "description": "1999D",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = list(I()), (I())\n    l = 0\n    for ind, i in enumerate(a):\n        if i == '?':\n            a[ind] = b[l] if l < len(b) else 'a'\n            l += 1\n        elif l < len(b) and i == b[l]:",
        "detail": "1999D",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "1999D",
        "description": "1999D",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b = list(I()), (I())\n    l = 0\n    for ind, i in enumerate(a):\n        if i == '?':\n            a[ind] = b[l] if l < len(b) else 'a'\n            l += 1\n        elif l < len(b) and i == b[l]:\n            l += 1",
        "detail": "1999D",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "1999D",
        "description": "1999D",
        "peekOfCode": "def Solve():\n    a, b = list(I()), (I())\n    l = 0\n    for ind, i in enumerate(a):\n        if i == '?':\n            a[ind] = b[l] if l < len(b) else 'a'\n            l += 1\n        elif l < len(b) and i == b[l]:\n            l += 1\n        # print(a)",
        "detail": "1999D",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "1999D",
        "description": "1999D",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = list(I()), (I())\n    l = 0\n    for ind, i in enumerate(a):\n        if i == '?':",
        "detail": "1999D",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "1999E",
        "description": "1999E",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\nd = [0]*(int(2e5)+1)\ndef f(x):\n    if x <= 2:\n        return 1\n    else:\n        return f(x//3)+1",
        "detail": "1999E",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "1999E",
        "description": "1999E",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\nd = [0]*(int(2e5)+1)\ndef f(x):\n    if x <= 2:\n        return 1\n    else:\n        return f(x//3)+1\nfor i in range(1, len(d)):",
        "detail": "1999E",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "1999E",
        "description": "1999E",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\nd = [0]*(int(2e5)+1)\ndef f(x):\n    if x <= 2:\n        return 1\n    else:\n        return f(x//3)+1\nfor i in range(1, len(d)):\n    if i <= 2:",
        "detail": "1999E",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "1999E",
        "description": "1999E",
        "peekOfCode": "def II(): return int(I())\nd = [0]*(int(2e5)+1)\ndef f(x):\n    if x <= 2:\n        return 1\n    else:\n        return f(x//3)+1\nfor i in range(1, len(d)):\n    if i <= 2:\n        d[i] = 1",
        "detail": "1999E",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "1999E",
        "description": "1999E",
        "peekOfCode": "def f(x):\n    if x <= 2:\n        return 1\n    else:\n        return f(x//3)+1\nfor i in range(1, len(d)):\n    if i <= 2:\n        d[i] = 1\n    else:\n        d[i] = d[i//3]+1",
        "detail": "1999E",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "1999E",
        "description": "1999E",
        "peekOfCode": "def Solve():\n    a, b = M()\n    print(d[b]-d[a-1]+d[a]-d[a-1])\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "1999E",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "1999E",
        "description": "1999E",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\nd = [0]*(int(2e5)+1)\ndef f(x):\n    if x <= 2:",
        "detail": "1999E",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "1999E",
        "description": "1999E",
        "peekOfCode": "d = [0]*(int(2e5)+1)\ndef f(x):\n    if x <= 2:\n        return 1\n    else:\n        return f(x//3)+1\nfor i in range(1, len(d)):\n    if i <= 2:\n        d[i] = 1\n    else:",
        "detail": "1999E",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "1999F",
        "description": "1999F",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "1999F",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "1999F",
        "description": "1999F",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "1999F",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "1999F",
        "description": "1999F",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "1999F",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "1999F",
        "description": "1999F",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "1999F",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "1999F",
        "description": "1999F",
        "peekOfCode": "def Solve():\n    a, b = M()\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "1999F",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "1999F",
        "description": "1999F",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = GL()\n    pass",
        "detail": "1999F",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "20000",
        "description": "20000",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    s = I()\n    # print(s[:2], s[2] != '0', int(s[2:]))\n    print('YES'if len(s) > 2 and s[:2] == '10' and s[2]\n          != '0' and int(s[2:]) >= 2 else 'NO')\n    pass",
        "detail": "20000",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "20000",
        "description": "20000",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    s = I()\n    # print(s[:2], s[2] != '0', int(s[2:]))\n    print('YES'if len(s) > 2 and s[:2] == '10' and s[2]\n          != '0' and int(s[2:]) >= 2 else 'NO')\n    pass\nif __name__ == \"__main__\":",
        "detail": "20000",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "20000",
        "description": "20000",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    s = I()\n    # print(s[:2], s[2] != '0', int(s[2:]))\n    print('YES'if len(s) > 2 and s[:2] == '10' and s[2]\n          != '0' and int(s[2:]) >= 2 else 'NO')\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "20000",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "20000",
        "description": "20000",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    s = I()\n    # print(s[:2], s[2] != '0', int(s[2:]))\n    print('YES'if len(s) > 2 and s[:2] == '10' and s[2]\n          != '0' and int(s[2:]) >= 2 else 'NO')\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "20000",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "20000",
        "description": "20000",
        "peekOfCode": "def Solve():\n    s = I()\n    # print(s[:2], s[2] != '0', int(s[2:]))\n    print('YES'if len(s) > 2 and s[:2] == '10' and s[2]\n          != '0' and int(s[2:]) >= 2 else 'NO')\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "20000",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "20000",
        "description": "20000",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    s = I()\n    # print(s[:2], s[2] != '0', int(s[2:]))\n    print('YES'if len(s) > 2 and s[:2] == '10' and s[2]\n          != '0' and int(s[2:]) >= 2 else 'NO')",
        "detail": "20000",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2000B",
        "description": "2000B",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    f = 0\n    l, r = None, None\n    for i in GL():\n        if l is None:",
        "detail": "2000B",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2000B",
        "description": "2000B",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    f = 0\n    l, r = None, None\n    for i in GL():\n        if l is None:\n            l = r = i",
        "detail": "2000B",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2000B",
        "description": "2000B",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    f = 0\n    l, r = None, None\n    for i in GL():\n        if l is None:\n            l = r = i\n        else:",
        "detail": "2000B",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2000B",
        "description": "2000B",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = II()\n    f = 0\n    l, r = None, None\n    for i in GL():\n        if l is None:\n            l = r = i\n        else:\n            if i == l-1:",
        "detail": "2000B",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2000B",
        "description": "2000B",
        "peekOfCode": "def Solve():\n    n = II()\n    f = 0\n    l, r = None, None\n    for i in GL():\n        if l is None:\n            l = r = i\n        else:\n            if i == l-1:\n                l -= 1",
        "detail": "2000B",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2000B",
        "description": "2000B",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    f = 0\n    l, r = None, None",
        "detail": "2000B",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2000C",
        "description": "2000C",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l, c = II(), GL(), II()\n    for i in range(c):\n        char, pat, t, f = {}, {}, I(), 0\n        if len(t) != n:\n            print('NO')",
        "detail": "2000C",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2000C",
        "description": "2000C",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l, c = II(), GL(), II()\n    for i in range(c):\n        char, pat, t, f = {}, {}, I(), 0\n        if len(t) != n:\n            print('NO')\n            continue",
        "detail": "2000C",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2000C",
        "description": "2000C",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l, c = II(), GL(), II()\n    for i in range(c):\n        char, pat, t, f = {}, {}, I(), 0\n        if len(t) != n:\n            print('NO')\n            continue\n        for ind, j in enumerate(t):",
        "detail": "2000C",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2000C",
        "description": "2000C",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, l, c = II(), GL(), II()\n    for i in range(c):\n        char, pat, t, f = {}, {}, I(), 0\n        if len(t) != n:\n            print('NO')\n            continue\n        for ind, j in enumerate(t):\n            if j not in char:",
        "detail": "2000C",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2000C",
        "description": "2000C",
        "peekOfCode": "def Solve():\n    n, l, c = II(), GL(), II()\n    for i in range(c):\n        char, pat, t, f = {}, {}, I(), 0\n        if len(t) != n:\n            print('NO')\n            continue\n        for ind, j in enumerate(t):\n            if j not in char:\n                char[j] = l[ind]",
        "detail": "2000C",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2000C",
        "description": "2000C",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l, c = II(), GL(), II()\n    for i in range(c):\n        char, pat, t, f = {}, {}, I(), 0\n        if len(t) != n:",
        "detail": "2000C",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2000D",
        "description": "2000D",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    l, s = GL(), I()\n    su = sum(l)\n    i = 0\n    while i < n and s[i] == 'R':",
        "detail": "2000D",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2000D",
        "description": "2000D",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    l, s = GL(), I()\n    su = sum(l)\n    i = 0\n    while i < n and s[i] == 'R':\n        su -= l[i]",
        "detail": "2000D",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2000D",
        "description": "2000D",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    l, s = GL(), I()\n    su = sum(l)\n    i = 0\n    while i < n and s[i] == 'R':\n        su -= l[i]\n        i += 1",
        "detail": "2000D",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2000D",
        "description": "2000D",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = int(input())\n    l, s = GL(), I()\n    su = sum(l)\n    i = 0\n    while i < n and s[i] == 'R':\n        su -= l[i]\n        i += 1\n    j = n-1",
        "detail": "2000D",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2000D",
        "description": "2000D",
        "peekOfCode": "def Solve():\n    n = int(input())\n    l, s = GL(), I()\n    su = sum(l)\n    i = 0\n    while i < n and s[i] == 'R':\n        su -= l[i]\n        i += 1\n    j = n-1\n    while j > i and s[j] == 'L':",
        "detail": "2000D",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2000D",
        "description": "2000D",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    l, s = GL(), I()\n    su = sum(l)\n    i = 0",
        "detail": "2000D",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "20010",
        "description": "20010",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL(Counter)\n    print(n-max(l.values()))\n    pass\nif __name__ == \"__main__\":",
        "detail": "20010",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "20010",
        "description": "20010",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL(Counter)\n    print(n-max(l.values()))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "20010",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "20010",
        "description": "20010",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL(Counter)\n    print(n-max(l.values()))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "20010",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "20010",
        "description": "20010",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL(Counter)\n    print(n-max(l.values()))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "20010",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "20010",
        "description": "20010",
        "peekOfCode": "def Solve():\n    n = II()\n    l = GL(Counter)\n    print(n-max(l.values()))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "20010",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "20010",
        "description": "20010",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL(Counter)\n    print(n-max(l.values()))\n    pass",
        "detail": "20010",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2001B copy",
        "description": "2001B copy",
        "peekOfCode": "def M(type=int): return (map(type ,input().split()))\ndef GL(type=int): return list(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001B copy",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2001B copy",
        "description": "2001B copy",
        "peekOfCode": "def GL(type=int): return list(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001B copy",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2001B copy",
        "description": "2001B copy",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001B copy",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2001B copy",
        "description": "2001B copy",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001B copy",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2001B copy",
        "description": "2001B copy",
        "peekOfCode": "def Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001B copy",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2001B copy",
        "description": "2001B copy",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type ,input().split()))\ndef GL(type=int): return list(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001B copy",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2001B",
        "description": "2001B",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef c(l):\n    v = [(i, ind) for ind, i in enumerate(l)]\n    v.sort()\n    # print(l, v)\n    i, co = 0, 0\n    # print(v)",
        "detail": "2001B",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2001B",
        "description": "2001B",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef c(l):\n    v = [(i, ind) for ind, i in enumerate(l)]\n    v.sort()\n    # print(l, v)\n    i, co = 0, 0\n    # print(v)\n    while i < len(v):",
        "detail": "2001B",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2001B",
        "description": "2001B",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef c(l):\n    v = [(i, ind) for ind, i in enumerate(l)]\n    v.sort()\n    # print(l, v)\n    i, co = 0, 0\n    # print(v)\n    while i < len(v):\n        j = i+1",
        "detail": "2001B",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2001B",
        "description": "2001B",
        "peekOfCode": "def II(): return int(I())\ndef c(l):\n    v = [(i, ind) for ind, i in enumerate(l)]\n    v.sort()\n    # print(l, v)\n    i, co = 0, 0\n    # print(v)\n    while i < len(v):\n        j = i+1\n        while j < len(v) and v[j][1] > v[j-1][1]:",
        "detail": "2001B",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 2,
        "importPath": "2001B",
        "description": "2001B",
        "peekOfCode": "def c(l):\n    v = [(i, ind) for ind, i in enumerate(l)]\n    v.sort()\n    # print(l, v)\n    i, co = 0, 0\n    # print(v)\n    while i < len(v):\n        j = i+1\n        while j < len(v) and v[j][1] > v[j-1][1]:\n            j += 1",
        "detail": "2001B",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2001B",
        "description": "2001B",
        "peekOfCode": "def Solve():\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n & 1:\n        print(*(list(range(1, n//2+1))+list((range(n, n//2, -1)))))\n    else:\n        print(-1)\n    pass\nif __name__ == \"__main__\":",
        "detail": "2001B",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2001B",
        "description": "2001B",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef c(l):\n    v = [(i, ind) for ind, i in enumerate(l)]\n    v.sort()\n    # print(l, v)\n    i, co = 0, 0",
        "detail": "2001B",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2001D copy",
        "description": "2001D copy",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "2001D copy",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2001D copy",
        "description": "2001D copy",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001D copy",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2001D copy",
        "description": "2001D copy",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001D copy",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2001D copy",
        "description": "2001D copy",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = int(input())\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001D copy",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2001D copy",
        "description": "2001D copy",
        "peekOfCode": "def Solve():\n    n = int(input())\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001D copy",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2001D copy",
        "description": "2001D copy",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = int(input())\n    l = GL()\n    pass",
        "detail": "2001D copy",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2001D",
        "description": "2001D",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL()\n    lis, last = [[]], [[], []]\n    for i in l:\n        pos1 = bisect_left(last[1], -i)\n        if pos1 > len(lis):",
        "detail": "2001D",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2001D",
        "description": "2001D",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL()\n    lis, last = [[]], [[], []]\n    for i in l:\n        pos1 = bisect_left(last[1], -i)\n        if pos1 > len(lis):\n            lis.append((lis[pos1*2] if lis else [])+[-i])",
        "detail": "2001D",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2001D",
        "description": "2001D",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL()\n    lis, last = [[]], [[], []]\n    for i in l:\n        pos1 = bisect_left(last[1], -i)\n        if pos1 > len(lis):\n            lis.append((lis[pos1*2] if lis else [])+[-i])\n            last[0].append(i)",
        "detail": "2001D",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2001D",
        "description": "2001D",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, l = II(), GL()\n    lis, last = [[]], [[], []]\n    for i in l:\n        pos1 = bisect_left(last[1], -i)\n        if pos1 > len(lis):\n            lis.append((lis[pos1*2] if lis else [])+[-i])\n            last[0].append(i)\n        else:",
        "detail": "2001D",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2001D",
        "description": "2001D",
        "peekOfCode": "def Solve():\n    n, l = II(), GL()\n    lis, last = [[]], [[], []]\n    for i in l:\n        pos1 = bisect_left(last[1], -i)\n        if pos1 > len(lis):\n            lis.append((lis[pos1*2] if lis else [])+[-i])\n            last[0].append(i)\n        else:\n            lis[i] = lis[pos1*2]+[-i]",
        "detail": "2001D",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2001D",
        "description": "2001D",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL()\n    lis, last = [[]], [[], []]\n    for i in l:\n        pos1 = bisect_left(last[1], -i)",
        "detail": "2001D",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2001E1",
        "description": "2001E1",
        "peekOfCode": "def M(type=int): return (map(type ,input().split()))\ndef GL(type=int): return list(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001E1",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2001E1",
        "description": "2001E1",
        "peekOfCode": "def GL(type=int): return list(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001E1",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2001E1",
        "description": "2001E1",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001E1",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2001E1",
        "description": "2001E1",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001E1",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2001E1",
        "description": "2001E1",
        "peekOfCode": "def Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001E1",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2001E1",
        "description": "2001E1",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type ,input().split()))\ndef GL(type=int): return list(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2001E1",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2003A",
        "description": "2003A",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    a = I()\n    print('YES' if a[0] != a[-1] else 'NO')\n    pass\nif __name__ == \"__main__\":",
        "detail": "2003A",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2003A",
        "description": "2003A",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    a = I()\n    print('YES' if a[0] != a[-1] else 'NO')\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "2003A",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2003A",
        "description": "2003A",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    a = I()\n    print('YES' if a[0] != a[-1] else 'NO')\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2003A",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2003A",
        "description": "2003A",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = II()\n    a = I()\n    print('YES' if a[0] != a[-1] else 'NO')\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2003A",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2003A",
        "description": "2003A",
        "peekOfCode": "def Solve():\n    n = II()\n    a = I()\n    print('YES' if a[0] != a[-1] else 'NO')\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "2003A",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2003A",
        "description": "2003A",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    a = I()\n    print('YES' if a[0] != a[-1] else 'NO')\n    pass",
        "detail": "2003A",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "20140",
        "description": "20140",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = M()\n    l = GL()\n    g = 0\n    ans = 0\n    for i in range(n):",
        "detail": "20140",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "20140",
        "description": "20140",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = M()\n    l = GL()\n    g = 0\n    ans = 0\n    for i in range(n):\n        if l[i] >= s:",
        "detail": "20140",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "20140",
        "description": "20140",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = M()\n    l = GL()\n    g = 0\n    ans = 0\n    for i in range(n):\n        if l[i] >= s:\n            g += l[i]",
        "detail": "20140",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "20140",
        "description": "20140",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, s = M()\n    l = GL()\n    g = 0\n    ans = 0\n    for i in range(n):\n        if l[i] >= s:\n            g += l[i]\n        elif l[i] == 0:",
        "detail": "20140",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "20140",
        "description": "20140",
        "peekOfCode": "def Solve():\n    n, s = M()\n    l = GL()\n    g = 0\n    ans = 0\n    for i in range(n):\n        if l[i] >= s:\n            g += l[i]\n        elif l[i] == 0:\n            if g:",
        "detail": "20140",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "20140",
        "description": "20140",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = M()\n    l = GL()\n    g = 0\n    ans = 0",
        "detail": "20140",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2014B",
        "description": "2014B",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l, r = a, b+a-1\n    # print(l != r, (r - l + 1) //\n    #       2, (l == r and l & 1 == 0))\n    print('YES' if l != r and (((r - l + 1) // 2)",
        "detail": "2014B",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2014B",
        "description": "2014B",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l, r = a, b+a-1\n    # print(l != r, (r - l + 1) //\n    #       2, (l == r and l & 1 == 0))\n    print('YES' if l != r and (((r - l + 1) // 2)\n          & 1 == 0) or (l == r and l & 1 == 0) else 'NO')",
        "detail": "2014B",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2014B",
        "description": "2014B",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l, r = a, b+a-1\n    # print(l != r, (r - l + 1) //\n    #       2, (l == r and l & 1 == 0))\n    print('YES' if l != r and (((r - l + 1) // 2)\n          & 1 == 0) or (l == r and l & 1 == 0) else 'NO')\n    pass",
        "detail": "2014B",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2014B",
        "description": "2014B",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b = M()\n    l, r = a, b+a-1\n    # print(l != r, (r - l + 1) //\n    #       2, (l == r and l & 1 == 0))\n    print('YES' if l != r and (((r - l + 1) // 2)\n          & 1 == 0) or (l == r and l & 1 == 0) else 'NO')\n    pass\nif __name__ == \"__main__\":",
        "detail": "2014B",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2014B",
        "description": "2014B",
        "peekOfCode": "def Solve():\n    a, b = M()\n    l, r = a, b+a-1\n    # print(l != r, (r - l + 1) //\n    #       2, (l == r and l & 1 == 0))\n    print('YES' if l != r and (((r - l + 1) // 2)\n          & 1 == 0) or (l == r and l & 1 == 0) else 'NO')\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "2014B",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2014B",
        "description": "2014B",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l, r = a, b+a-1\n    # print(l != r, (r - l + 1) //\n    #       2, (l == r and l & 1 == 0))",
        "detail": "2014B",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2014C",
        "description": "2014C",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, lis = II(), sorted(GL())\n    def check(mid):\n        nav = decimal.Decimal(av+mid)/(n*2)\n        return bisect_left(lis, nav)\n    if n <= 2:",
        "detail": "2014C",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2014C",
        "description": "2014C",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, lis = II(), sorted(GL())\n    def check(mid):\n        nav = decimal.Decimal(av+mid)/(n*2)\n        return bisect_left(lis, nav)\n    if n <= 2:\n        print(-1)",
        "detail": "2014C",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2014C",
        "description": "2014C",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, lis = II(), sorted(GL())\n    def check(mid):\n        nav = decimal.Decimal(av+mid)/(n*2)\n        return bisect_left(lis, nav)\n    if n <= 2:\n        print(-1)\n    else:",
        "detail": "2014C",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2014C",
        "description": "2014C",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, lis = II(), sorted(GL())\n    def check(mid):\n        nav = decimal.Decimal(av+mid)/(n*2)\n        return bisect_left(lis, nav)\n    if n <= 2:\n        print(-1)\n    else:\n        l, r, av = 0, 10**10, sum(lis)",
        "detail": "2014C",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2014C",
        "description": "2014C",
        "peekOfCode": "def Solve():\n    n, lis = II(), sorted(GL())\n    def check(mid):\n        nav = decimal.Decimal(av+mid)/(n*2)\n        return bisect_left(lis, nav)\n    if n <= 2:\n        print(-1)\n    else:\n        l, r, av = 0, 10**10, sum(lis)\n        while l < r:",
        "detail": "2014C",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2014C",
        "description": "2014C",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, lis = II(), sorted(GL())\n    def check(mid):\n        nav = decimal.Decimal(av+mid)/(n*2)",
        "detail": "2014C",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    val, turn, x = 1, 0, 0\n    while -n <= x <= n:\n        x += (-1 if turn & 1 == 0 else 1)*val",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    val, turn, x = 1, 0, 0\n    while -n <= x <= n:\n        x += (-1 if turn & 1 == 0 else 1)*val\n        turn += 1",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    val, turn, x = 1, 0, 0\n    while -n <= x <= n:\n        x += (-1 if turn & 1 == 0 else 1)*val\n        turn += 1\n        val += 2",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    val, turn, x = 1, 0, 0\n    while -n <= x <= n:\n        x += (-1 if turn & 1 == 0 else 1)*val\n        turn += 1\n        val += 2\n        # print(x, turn, val)",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    n = II()\n    val, turn, x = 1, 0, 0\n    while -n <= x <= n:\n        x += (-1 if turn & 1 == 0 else 1)*val\n        turn += 1\n        val += 2\n        # print(x, turn, val)\n    print('Kosuke' if turn & 1 == 0 else 'Sakurako')",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "def Solve():\n    n = II()\n    val, turn, x = 1, 0, 0\n    while -n <= x <= n:\n        x += (-1 if turn & 1 == 0 else 1)*val\n        turn += 1\n        val += 2\n        # print(x, turn, val)\n    print('Kosuke' if turn & 1 == 0 else 'Sakurako')\nif __name__ == \"__main__\":",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "20330",
        "description": "20330",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "20330",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    l = [GL() for i in range(n)]\n    ans = 0\n    for i in range(n):",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    l = [GL() for i in range(n)]\n    ans = 0\n    for i in range(n):\n        j, i, mn = i, 0, float('inf')",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    l = [GL() for i in range(n)]\n    ans = 0\n    for i in range(n):\n        j, i, mn = i, 0, float('inf')\n        while i < n and j < n:",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    l = [GL() for i in range(n)]\n    ans = 0\n    for i in range(n):\n        j, i, mn = i, 0, float('inf')\n        while i < n and j < n:\n            mn = min(l[i][j], mn)",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    n = II()\n    l = [GL() for i in range(n)]\n    ans = 0\n    for i in range(n):\n        j, i, mn = i, 0, float('inf')\n        while i < n and j < n:\n            mn = min(l[i][j], mn)\n            j += 1",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "def Solve():\n    n = II()\n    l = [GL() for i in range(n)]\n    ans = 0\n    for i in range(n):\n        j, i, mn = i, 0, float('inf')\n        while i < n and j < n:\n            mn = min(l[i][j], mn)\n            j += 1\n            i += 1",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2033B",
        "description": "2033B",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "2033B",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\n@cache\ndef Solve():",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\n@cache\ndef Solve():\n    n = II()\n    lis = GL()\n    # a=[1]",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\n@cache\ndef Solve():\n    n = II()\n    lis = GL()\n    # a=[1]\n    # for i in range(n):",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\n@cache\ndef Solve():\n    n = II()\n    lis = GL()\n    # a=[1]\n    # for i in range(n):\n    #     if l[i]==l[i-1]:",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\n@cache\ndef Solve():\n    n = II()\n    lis = GL()\n    # a=[1]\n    # for i in range(n):\n    #     if l[i]==l[i-1]:\n    #         a.append(a[-1]+1)",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def p(*args): print(*args)\n@cache\ndef Solve():\n    n = II()\n    lis = GL()\n    # a=[1]\n    # for i in range(n):\n    #     if l[i]==l[i-1]:\n    #         a.append(a[-1]+1)\n    #     else:",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "def Solve():\n    n = II()\n    lis = GL()\n    # a=[1]\n    # for i in range(n):\n    #     if l[i]==l[i-1]:\n    #         a.append(a[-1]+1)\n    #     else:\n    #         a.append(1)\n    l, r = 1, n-2",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2033C",
        "description": "2033C",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "2033C",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, arr = II(), GL()",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, arr = II(), GL()\n    s, d, ans = 0, defaultdict(int), [0]*n\n    for ind, i in enumerate(arr):\n        s += i",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, arr = II(), GL()\n    s, d, ans = 0, defaultdict(int), [0]*n\n    for ind, i in enumerate(arr):\n        s += i\n        if s == 0:",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, arr = II(), GL()\n    s, d, ans = 0, defaultdict(int), [0]*n\n    for ind, i in enumerate(arr):\n        s += i\n        if s == 0:\n            ans[ind] = 1",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, arr = II(), GL()\n    s, d, ans = 0, defaultdict(int), [0]*n\n    for ind, i in enumerate(arr):\n        s += i\n        if s == 0:\n            ans[ind] = 1\n        if ind:",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    n, arr = II(), GL()\n    s, d, ans = 0, defaultdict(int), [0]*n\n    for ind, i in enumerate(arr):\n        s += i\n        if s == 0:\n            ans[ind] = 1\n        if ind:\n            ans[ind] = max(ans[ind], ans[ind-1])",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "def Solve():\n    n, arr = II(), GL()\n    s, d, ans = 0, defaultdict(int), [0]*n\n    for ind, i in enumerate(arr):\n        s += i\n        if s == 0:\n            ans[ind] = 1\n        if ind:\n            ans[ind] = max(ans[ind], ans[ind-1])\n        if s in d:",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2033D",
        "description": "2033D",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "2033D",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a = [1, 1]",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a = [1, 1]\n    for i in range(10000):\n        a.append((a[-1]+a[-2]))\n    # print(a)",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a = [1, 1]\n    for i in range(10000):\n        a.append((a[-1]+a[-2]))\n    # print(a)\n    for i in range(1, 100):",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a = [1, 1]\n    for i in range(10000):\n        a.append((a[-1]+a[-2]))\n    # print(a)\n    for i in range(1, 100):\n        l = ([(ind) for ind, j in enumerate(a) if j % i == 0])",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a = [1, 1]\n    for i in range(10000):\n        a.append((a[-1]+a[-2]))\n    # print(a)\n    for i in range(1, 100):\n        l = ([(ind) for ind, j in enumerate(a) if j % i == 0])\n        if l:",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    a = [1, 1]\n    for i in range(10000):\n        a.append((a[-1]+a[-2]))\n    # print(a)\n    for i in range(1, 100):\n        l = ([(ind) for ind, j in enumerate(a) if j % i == 0])\n        if l:\n            print(i, {l[ind]-l[ind-1] for ind in range(1, len(l))})",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "def Solve():\n    a = [1, 1]\n    for i in range(10000):\n        a.append((a[-1]+a[-2]))\n    # print(a)\n    for i in range(1, 100):\n        l = ([(ind) for ind, j in enumerate(a) if j % i == 0])\n        if l:\n            print(i, {l[ind]-l[ind-1] for ind in range(1, len(l))})\n        else:",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "2033F",
        "description": "2033F",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "2033F",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  Check(mid):\n    return sum(i//mid for i in a)>=k\nl,r=1,sum(a)\nwhile r-l>1e-6:\n    mid=(l+r)/2\n    # print(l, r, mid, (v := Check(mid)))\n    if (v := Check(mid)):\n        l=mid\n    else:\n        r=mid"
        },
        "kind": 2,
        "importPath": "283932B",
        "description": "283932B",
        "peekOfCode": "def  Check(mid):\n    return sum(i//mid for i in a)>=k\nl,r=1,sum(a)\nwhile r-l>1e-6:\n    mid=(l+r)/2\n    # print(l, r, mid, (v := Check(mid)))\n    if (v := Check(mid)):\n        l=mid\n    else:\n        r=mid",
        "detail": "283932B",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Add_1_or_2_Game",
        "description": "Add_1_or_2_Game",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\n@cache\ndef dp(n):\n    if n == 0:\n        return False\n    elif n < 0:\n        return True",
        "detail": "Add_1_or_2_Game",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Add_1_or_2_Game",
        "description": "Add_1_or_2_Game",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\n@cache\ndef dp(n):\n    if n == 0:\n        return False\n    elif n < 0:\n        return True\n    return not dp(n-1) or not dp(n-2)",
        "detail": "Add_1_or_2_Game",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Add_1_or_2_Game",
        "description": "Add_1_or_2_Game",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\n@cache\ndef dp(n):\n    if n == 0:\n        return False\n    elif n < 0:\n        return True\n    return not dp(n-1) or not dp(n-2)\ndef Solve():",
        "detail": "Add_1_or_2_Game",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Add_1_or_2_Game",
        "description": "Add_1_or_2_Game",
        "peekOfCode": "def II(): return int(I())\n@cache\ndef dp(n):\n    if n == 0:\n        return False\n    elif n < 0:\n        return True\n    return not dp(n-1) or not dp(n-2)\ndef Solve():\n    print('ALICE' if (II()) == 1 else 'BOB')",
        "detail": "Add_1_or_2_Game",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 2,
        "importPath": "Add_1_or_2_Game",
        "description": "Add_1_or_2_Game",
        "peekOfCode": "def dp(n):\n    if n == 0:\n        return False\n    elif n < 0:\n        return True\n    return not dp(n-1) or not dp(n-2)\ndef Solve():\n    print('ALICE' if (II()) == 1 else 'BOB')\n    pass\nif __name__ == \"__main__\":",
        "detail": "Add_1_or_2_Game",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Add_1_or_2_Game",
        "description": "Add_1_or_2_Game",
        "peekOfCode": "def Solve():\n    print('ALICE' if (II()) == 1 else 'BOB')\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Add_1_or_2_Game",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Add_1_or_2_Game",
        "description": "Add_1_or_2_Game",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\n@cache\ndef dp(n):\n    if n == 0:\n        return False\n    elif n < 0:",
        "detail": "Add_1_or_2_Game",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Aikagra_and_Pronunciation",
        "description": "Aikagra_and_Pronunciation",
        "peekOfCode": "def GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    n = int(input())\n    d = {(v := list(map(str, input().split())))[1]: v[0] for i in range(n)}\n    for t in range(int(input())):\n        a, b = map(str, input().split())",
        "detail": "Aikagra_and_Pronunciation",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Aikagra_and_Pronunciation",
        "description": "Aikagra_and_Pronunciation",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    n = int(input())\n    d = {(v := list(map(str, input().split())))[1]: v[0] for i in range(n)}\n    for t in range(int(input())):\n        a, b = map(str, input().split())\n        b = list(b)",
        "detail": "Aikagra_and_Pronunciation",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Aikagra_and_Pronunciation",
        "description": "Aikagra_and_Pronunciation",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    n = int(input())\n    d = {(v := list(map(str, input().split())))[1]: v[0] for i in range(n)}\n    for t in range(int(input())):\n        a, b = map(str, input().split())\n        b = list(b)\n        for ind, i in enumerate(b):",
        "detail": "Aikagra_and_Pronunciation",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Aikagra_and_Pronunciation",
        "description": "Aikagra_and_Pronunciation",
        "peekOfCode": "def Solve():\n    pass\nif __name__ == \"__main__\":\n    n = int(input())\n    d = {(v := list(map(str, input().split())))[1]: v[0] for i in range(n)}\n    for t in range(int(input())):\n        a, b = map(str, input().split())\n        b = list(b)\n        for ind, i in enumerate(b):\n            if i in d:",
        "detail": "Aikagra_and_Pronunciation",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Aikagra_and_Pronunciation",
        "description": "Aikagra_and_Pronunciation",
        "peekOfCode": "mod = 10**9+7\ndef GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    n = int(input())\n    d = {(v := list(map(str, input().split())))[1]: v[0] for i in range(n)}\n    for t in range(int(input())):",
        "detail": "Aikagra_and_Pronunciation",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Alternating_Binary_String",
        "description": "Alternating_Binary_String",
        "peekOfCode": "def f(s=0):\n    fg = 0\n    for ind, i in enumerate(l):\n        if (not ind & 1 and s != (int(i)+fg) & 1) or (ind & 1 and s == (int(i)+fg) & 1):\n            fg += 1\n    return fg\nfor t in range(int(input())):\n    n = int(input())\n    l = input()\n    print(min(f(0), f(1)))",
        "detail": "Alternating_Binary_String",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Another_Game",
        "description": "Another_Game",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef check(mid):\n    pass\ndef Solve():\n    n, lis = II(), GL()\n    # l, r = 0, n*2\n    # while l < r:",
        "detail": "Another_Game",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Another_Game",
        "description": "Another_Game",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef check(mid):\n    pass\ndef Solve():\n    n, lis = II(), GL()\n    # l, r = 0, n*2\n    # while l < r:\n    #     mid = (l+r)//2",
        "detail": "Another_Game",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Another_Game",
        "description": "Another_Game",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef check(mid):\n    pass\ndef Solve():\n    n, lis = II(), GL()\n    # l, r = 0, n*2\n    # while l < r:\n    #     mid = (l+r)//2\n    #     if check(mid):",
        "detail": "Another_Game",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Another_Game",
        "description": "Another_Game",
        "peekOfCode": "def II(): return int(I())\ndef check(mid):\n    pass\ndef Solve():\n    n, lis = II(), GL()\n    # l, r = 0, n*2\n    # while l < r:\n    #     mid = (l+r)//2\n    #     if check(mid):\n    #         r = mid",
        "detail": "Another_Game",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "Another_Game",
        "description": "Another_Game",
        "peekOfCode": "def check(mid):\n    pass\ndef Solve():\n    n, lis = II(), GL()\n    # l, r = 0, n*2\n    # while l < r:\n    #     mid = (l+r)//2\n    #     if check(mid):\n    #         r = mid\n    #     else:",
        "detail": "Another_Game",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Another_Game",
        "description": "Another_Game",
        "peekOfCode": "def Solve():\n    n, lis = II(), GL()\n    # l, r = 0, n*2\n    # while l < r:\n    #     mid = (l+r)//2\n    #     if check(mid):\n    #         r = mid\n    #     else:\n    #         l = mid+1\n    d, ans = {}, 0",
        "detail": "Another_Game",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Another_Game",
        "description": "Another_Game",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef check(mid):\n    pass\ndef Solve():",
        "detail": "Another_Game",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\ndef primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "primeFactors",
        "kind": 2,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "def primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        if n == 1:\n            return l\n    if n != 1:\n        l[n] += 1",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "def exists(x, y, nums):\n    return lambda (x, y): x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "def GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "def Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Average_Permutation",
        "description": "Average_Permutation",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Average_Permutation",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Back_Front",
        "description": "Back_Front",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef f(s):\n    d, t, j = [], 'front', 0\n    for ind, i in enumerate(s):\n        if j < len(t) and (i == t[j] or i == '?'):\n            j = (j+1) % len(t)\n            d.append(ind)",
        "detail": "Back_Front",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Back_Front",
        "description": "Back_Front",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef f(s):\n    d, t, j = [], 'front', 0\n    for ind, i in enumerate(s):\n        if j < len(t) and (i == t[j] or i == '?'):\n            j = (j+1) % len(t)\n            d.append(ind)\n    print(d, s)",
        "detail": "Back_Front",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Back_Front",
        "description": "Back_Front",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef f(s):\n    d, t, j = [], 'front', 0\n    for ind, i in enumerate(s):\n        if j < len(t) and (i == t[j] or i == '?'):\n            j = (j+1) % len(t)\n            d.append(ind)\n    print(d, s)\n    return ''.join([i for ind, i in enumerate(s) if ind not in d]) if len(d) == len(t) else s",
        "detail": "Back_Front",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Back_Front",
        "description": "Back_Front",
        "peekOfCode": "def II(): return int(I())\ndef f(s):\n    d, t, j = [], 'front', 0\n    for ind, i in enumerate(s):\n        if j < len(t) and (i == t[j] or i == '?'):\n            j = (j+1) % len(t)\n            d.append(ind)\n    print(d, s)\n    return ''.join([i for ind, i in enumerate(s) if ind not in d]) if len(d) == len(t) else s\ndef b(s, t):",
        "detail": "Back_Front",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Back_Front",
        "description": "Back_Front",
        "peekOfCode": "def f(s):\n    d, t, j = [], 'front', 0\n    for ind, i in enumerate(s):\n        if j < len(t) and (i == t[j] or i == '?'):\n            j = (j+1) % len(t)\n            d.append(ind)\n    print(d, s)\n    return ''.join([i for ind, i in enumerate(s) if ind not in d]) if len(d) == len(t) else s\ndef b(s, t):\n    d, j, f = [],  0, 0",
        "detail": "Back_Front",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 2,
        "importPath": "Back_Front",
        "description": "Back_Front",
        "peekOfCode": "def b(s, t):\n    d, j, f = [],  0, 0\n    for ind, i in enumerate(s):\n        if j < len(t) and (i == t[j] or (f and (f := (f-1)))):\n            j = (j+1) % len(t)\n            d.append(ind)\n            if j == 0:\n                f += 1\n    rem = len(d) % len(t)\n    d = set(d[rem:])",
        "detail": "Back_Front",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Back_Front",
        "description": "Back_Front",
        "peekOfCode": "def Solve():\n    n = int(input())\n    s = I()\n    while len(s) != len(s := b(s[::-1], 'kacb')[::-1]) and (s := s+'?'):\n        print(s)\n    while len(s) != len(s := b(s, 'front')) and (s := '?'+s):\n        print(s)\n    print(len(s))\ndef primeFactors(n):\n    l, i = Counter(), 2",
        "detail": "Back_Front",
        "documentation": {}
    },
    {
        "label": "primeFactors",
        "kind": 2,
        "importPath": "Back_Front",
        "description": "Back_Front",
        "peekOfCode": "def primeFactors(n):\n    l, i = Counter(), 2\n    while i*i <= n:\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        i += 1\n    if n != 1:\n        l[n] += 1\n    return l",
        "detail": "Back_Front",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Back_Front",
        "description": "Back_Front",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef f(s):\n    d, t, j = [], 'front', 0\n    for ind, i in enumerate(s):\n        if j < len(t) and (i == t[j] or i == '?'):\n            j = (j+1) % len(t)",
        "detail": "Back_Front",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef check(mid, arr, k):\n    ans = 0",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef check(mid, arr, k):\n    ans = 0\n    # print(arr)\n    for i in range(1, len(arr)):\n        if (arr[0]+mid*i-arr[i]) > mid:",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef check(mid, arr, k):\n    ans = 0\n    # print(arr)\n    for i in range(1, len(arr)):\n        if (arr[0]+mid*i-arr[i]) > mid:\n            print(mid, arr)",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef check(mid, arr, k):\n    ans = 0\n    # print(arr)\n    for i in range(1, len(arr)):\n        if (arr[0]+mid*i-arr[i]) > mid:\n            print(mid, arr)\n            return False",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef check(mid, arr, k):\n    ans = 0\n    # print(arr)\n    for i in range(1, len(arr)):\n        if (arr[0]+mid*i-arr[i]) > mid:\n            print(mid, arr)\n            return False\n        arr[i] = arr[0]+mid*i",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def p(*args): print(*args)\ndef check(mid, arr, k):\n    ans = 0\n    # print(arr)\n    for i in range(1, len(arr)):\n        if (arr[0]+mid*i-arr[i]) > mid:\n            print(mid, arr)\n            return False\n        arr[i] = arr[0]+mid*i\n    print(arr, 'ans')",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def check(mid, arr, k):\n    ans = 0\n    # print(arr)\n    for i in range(1, len(arr)):\n        if (arr[0]+mid*i-arr[i]) > mid:\n            print(mid, arr)\n            return False\n        arr[i] = arr[0]+mid*i\n    print(arr, 'ans')\n    return arr",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "def Solve():\n    (a, b), lis = GL(), GL()\n    if a == 1:\n        print(0)\n        print(*lis)\n        return\n    l, r = 0, 10**9+1\n    while l < r:\n        mid = (l+r)//2\n        if check(mid, lis[::], b) or check(mid, [lis[0]+mid]+lis[1:], b):",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Balance_Difficulties",
        "description": "Balance_Difficulties",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Balance_Difficulties",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Ball_Game",
        "description": "Ball_Game",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    pos, speed = GL(), GL()\n    l = [[Decimal(x) / Decimal(y), x, y] for x, y in zip(pos, speed)]\n    l.sort(key=lambda x: (x[0], x[1]))\n    ans = 0",
        "detail": "Ball_Game",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Ball_Game",
        "description": "Ball_Game",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    pos, speed = GL(), GL()\n    l = [[Decimal(x) / Decimal(y), x, y] for x, y in zip(pos, speed)]\n    l.sort(key=lambda x: (x[0], x[1]))\n    ans = 0\n    i = 0",
        "detail": "Ball_Game",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Ball_Game",
        "description": "Ball_Game",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    pos, speed = GL(), GL()\n    l = [[Decimal(x) / Decimal(y), x, y] for x, y in zip(pos, speed)]\n    l.sort(key=lambda x: (x[0], x[1]))\n    ans = 0\n    i = 0\n    while i < n:",
        "detail": "Ball_Game",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Ball_Game",
        "description": "Ball_Game",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = II()\n    pos, speed = GL(), GL()\n    l = [[Decimal(x) / Decimal(y), x, y] for x, y in zip(pos, speed)]\n    l.sort(key=lambda x: (x[0], x[1]))\n    ans = 0\n    i = 0\n    while i < n:\n        j = i+1",
        "detail": "Ball_Game",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Ball_Game",
        "description": "Ball_Game",
        "peekOfCode": "def Solve():\n    n = II()\n    pos, speed = GL(), GL()\n    l = [[Decimal(x) / Decimal(y), x, y] for x, y in zip(pos, speed)]\n    l.sort(key=lambda x: (x[0], x[1]))\n    ans = 0\n    i = 0\n    while i < n:\n        j = i+1\n        while j < n and l[j][1] < l[i][1]:",
        "detail": "Ball_Game",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Ball_Game",
        "description": "Ball_Game",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    pos, speed = GL(), GL()\n    l = [[Decimal(x) / Decimal(y), x, y] for x, y in zip(pos, speed)]\n    l.sort(key=lambda x: (x[0], x[1]))",
        "detail": "Ball_Game",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a, b = M(int)",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a, b = M(int)\n    s, t = I(), I()\n    if s.count('1') != t.count('1'):\n        print('NO')",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a, b = M(int)\n    s, t = I(), I()\n    if s.count('1') != t.count('1'):\n        print('NO')\n    else:",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a, b = M(int)\n    s, t = I(), I()\n    if s.count('1') != t.count('1'):\n        print('NO')\n    else:\n        a, b = 0, 0",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a, b = M(int)\n    s, t = I(), I()\n    if s.count('1') != t.count('1'):\n        print('NO')\n    else:\n        a, b = 0, 0\n        ans = 0",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    a, b = M(int)\n    s, t = I(), I()\n    if s.count('1') != t.count('1'):\n        print('NO')\n    else:\n        a, b = 0, 0\n        ans = 0\n        for ind, (x, y) in enumerate(zip(s, t)):",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "def Solve():\n    a, b = M(int)\n    s, t = I(), I()\n    if s.count('1') != t.count('1'):\n        print('NO')\n    else:\n        a, b = 0, 0\n        ans = 0\n        for ind, (x, y) in enumerate(zip(s, t)):\n            if x == y:",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Binary_Conversion",
        "description": "Binary_Conversion",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Binary_Conversion",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Binary_Minimal",
        "description": "Binary_Minimal",
        "peekOfCode": "def Solve():\n    a, b = GetL()\n    s = list(GetS())\n    rem = set()\n    for ind, i in enumerate(s):\n        if i == '1' and b:\n            rem.add(ind)\n            b -= 1\n    s = [i for ind, i in enumerate(s) if ind not in rem]\n    while b:",
        "detail": "Binary_Minimal",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Binary_Parity",
        "description": "Binary_Parity",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n = int(input())\n        c = 0\n        while n:\n            c, n = c+n & 1, n >> 1\n        print('EVEN' if c & 1 == 0 else 'ODD')\nif __name__ == \"__main__\":\n    main()",
        "detail": "Binary_Parity",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Bouncing_Ball",
        "description": "Bouncing_Ball",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL()\n    n, cur = sum(l), 0\n    ways = 0\n    for i in l:",
        "detail": "Bouncing_Ball",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Bouncing_Ball",
        "description": "Bouncing_Ball",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL()\n    n, cur = sum(l), 0\n    ways = 0\n    for i in l:\n        if i == 0:",
        "detail": "Bouncing_Ball",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Bouncing_Ball",
        "description": "Bouncing_Ball",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL()\n    n, cur = sum(l), 0\n    ways = 0\n    for i in l:\n        if i == 0:\n            if cur == n:",
        "detail": "Bouncing_Ball",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Bouncing_Ball",
        "description": "Bouncing_Ball",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL()\n    n, cur = sum(l), 0\n    ways = 0\n    for i in l:\n        if i == 0:\n            if cur == n:\n                ways += 2",
        "detail": "Bouncing_Ball",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Bouncing_Ball",
        "description": "Bouncing_Ball",
        "peekOfCode": "def Solve():\n    n = II()\n    l = GL()\n    n, cur = sum(l), 0\n    ways = 0\n    for i in l:\n        if i == 0:\n            if cur == n:\n                ways += 2\n            elif abs(cur-n) == 1:",
        "detail": "Bouncing_Ball",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Bouncing_Ball",
        "description": "Bouncing_Ball",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL()\n    n, cur = sum(l), 0\n    ways = 0",
        "detail": "Bouncing_Ball",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Budget_Allotment",
        "description": "Budget_Allotment",
        "peekOfCode": "def GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL(int)\n    l = sorted(GetL(int), reverse=True)\n    tot = 0\n    ans = 0\n    heap = []\n    for i in l:",
        "detail": "Budget_Allotment",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Budget_Allotment",
        "description": "Budget_Allotment",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL(int)\n    l = sorted(GetL(int), reverse=True)\n    tot = 0\n    ans = 0\n    heap = []\n    for i in l:\n        if i < b:",
        "detail": "Budget_Allotment",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Budget_Allotment",
        "description": "Budget_Allotment",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL(int)\n    l = sorted(GetL(int), reverse=True)\n    tot = 0\n    ans = 0\n    heap = []\n    for i in l:\n        if i < b:\n            if tot-(b-i) >= 0:",
        "detail": "Budget_Allotment",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Budget_Allotment",
        "description": "Budget_Allotment",
        "peekOfCode": "def Solve():\n    a, b = GetL(int)\n    l = sorted(GetL(int), reverse=True)\n    tot = 0\n    ans = 0\n    heap = []\n    for i in l:\n        if i < b:\n            if tot-(b-i) >= 0:\n                ans += 1",
        "detail": "Budget_Allotment",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Budget_Allotment",
        "description": "Budget_Allotment",
        "peekOfCode": "mod = 10**9+7\ndef GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL(int)\n    l = sorted(GetL(int), reverse=True)\n    tot = 0\n    ans = 0\n    heap = []",
        "detail": "Budget_Allotment",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Butterfly",
        "description": "Butterfly",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    f, s = True, sum(l)\n    for i in range(3):\n        if s-l[i] < l[i]:\n            f = False",
        "detail": "Butterfly",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Butterfly",
        "description": "Butterfly",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    f, s = True, sum(l)\n    for i in range(3):\n        if s-l[i] < l[i]:\n            f = False\n    print('YES' if f else 'NO')",
        "detail": "Butterfly",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Butterfly",
        "description": "Butterfly",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    f, s = True, sum(l)\n    for i in range(3):\n        if s-l[i] < l[i]:\n            f = False\n    print('YES' if f else 'NO')\n    pass",
        "detail": "Butterfly",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Butterfly",
        "description": "Butterfly",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    l = GL()\n    f, s = True, sum(l)\n    for i in range(3):\n        if s-l[i] < l[i]:\n            f = False\n    print('YES' if f else 'NO')\n    pass\nif __name__ == \"__main__\":",
        "detail": "Butterfly",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Butterfly",
        "description": "Butterfly",
        "peekOfCode": "def Solve():\n    l = GL()\n    f, s = True, sum(l)\n    for i in range(3):\n        if s-l[i] < l[i]:\n            f = False\n    print('YES' if f else 'NO')\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "Butterfly",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Butterfly",
        "description": "Butterfly",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    f, s = True, sum(l)\n    for i in range(3):\n        if s-l[i] < l[i]:",
        "detail": "Butterfly",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Caesar_Cipher_Lite",
        "description": "Caesar_Cipher_Lite",
        "peekOfCode": "t = int(input())\nl = [[] for i in range(3)]\nfor i in range(26):\n    l[i % 3].append(i)\nd = {}\nfor ind, i in enumerate(l[0]+l[1]+l[2]):\n    d[chr(ord('A')+i)] = ind+1\nprint(d)\nwhile t:\n    n = int(input())",
        "detail": "Caesar_Cipher_Lite",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "Caesar_Cipher_Lite",
        "description": "Caesar_Cipher_Lite",
        "peekOfCode": "l = [[] for i in range(3)]\nfor i in range(26):\n    l[i % 3].append(i)\nd = {}\nfor ind, i in enumerate(l[0]+l[1]+l[2]):\n    d[chr(ord('A')+i)] = ind+1\nprint(d)\nwhile t:\n    n = int(input())\n    a, b = input(), input()",
        "detail": "Caesar_Cipher_Lite",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "Caesar_Cipher_Lite",
        "description": "Caesar_Cipher_Lite",
        "peekOfCode": "d = {}\nfor ind, i in enumerate(l[0]+l[1]+l[2]):\n    d[chr(ord('A')+i)] = ind+1\nprint(d)\nwhile t:\n    n = int(input())\n    a, b = input(), input()\n    print(*[d[b[i]]-d[a[i]] if d[b[i]]-d[a[i]] >=\n          0 else 26-(-d[b[i]]+d[a[i]]) for i in range(n)])\n    t -= 1",
        "detail": "Caesar_Cipher_Lite",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Calorie_Limit",
        "description": "Calorie_Limit",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    ans = 0\n    for i in GL():\n        if i <= b:\n            b -= i",
        "detail": "Calorie_Limit",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Calorie_Limit",
        "description": "Calorie_Limit",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    ans = 0\n    for i in GL():\n        if i <= b:\n            b -= i\n        else:",
        "detail": "Calorie_Limit",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Calorie_Limit",
        "description": "Calorie_Limit",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    ans = 0\n    for i in GL():\n        if i <= b:\n            b -= i\n        else:\n            break",
        "detail": "Calorie_Limit",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Calorie_Limit",
        "description": "Calorie_Limit",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b = M()\n    ans = 0\n    for i in GL():\n        if i <= b:\n            b -= i\n        else:\n            break\n        ans += 1",
        "detail": "Calorie_Limit",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Calorie_Limit",
        "description": "Calorie_Limit",
        "peekOfCode": "def Solve():\n    a, b = M()\n    ans = 0\n    for i in GL():\n        if i <= b:\n            b -= i\n        else:\n            break\n        ans += 1\n    print(ans)",
        "detail": "Calorie_Limit",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Calorie_Limit",
        "description": "Calorie_Limit",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    ans = 0\n    for i in GL():\n        if i <= b:",
        "detail": "Calorie_Limit",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\nd = {ind: str(i) for ind, i in enumerate([0, 2, 4, 6, 8])}",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\nd = {ind: str(i) for ind, i in enumerate([0, 2, 4, 6, 8])}\ndef f(n):\n    if n < 5:",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\nd = {ind: str(i) for ind, i in enumerate([0, 2, 4, 6, 8])}\ndef f(n):\n    if n < 5:\n        return d[n]\n    else:\n        return f(n//5)+d[n % 5]",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\nd = {ind: str(i) for ind, i in enumerate([0, 2, 4, 6, 8])}\ndef f(n):\n    if n < 5:\n        return d[n]\n    else:\n        return f(n//5)+d[n % 5]\ndef Solve():",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\nd = {ind: str(i) for ind, i in enumerate([0, 2, 4, 6, 8])}\ndef f(n):\n    if n < 5:\n        return d[n]\n    else:\n        return f(n//5)+d[n % 5]\ndef Solve():\n    print(f(II()-1))",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def p(*args): print(*args)\nd = {ind: str(i) for ind, i in enumerate([0, 2, 4, 6, 8])}\ndef f(n):\n    if n < 5:\n        return d[n]\n    else:\n        return f(n//5)+d[n % 5]\ndef Solve():\n    print(f(II()-1))\n    pass",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def f(n):\n    if n < 5:\n        return d[n]\n    else:\n        return f(n//5)+d[n % 5]\ndef Solve():\n    print(f(II()-1))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "def Solve():\n    print(f(II()-1))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "Chef_And_The_Hiring_Event",
        "description": "Chef_And_The_Hiring_Event",
        "peekOfCode": "d = {ind: str(i) for ind, i in enumerate([0, 2, 4, 6, 8])}\ndef f(n):\n    if n < 5:\n        return d[n]\n    else:\n        return f(n//5)+d[n % 5]\ndef Solve():\n    print(f(II()-1))\n    pass\nif __name__ == \"__main__\":",
        "detail": "Chef_And_The_Hiring_Event",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "description": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = II(), I()\n    d, i = [[], []], 0\n    while i < len(s):\n        j = i+1\n        while j < len(s) and s[j] == s[i]:",
        "detail": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "description": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = II(), I()\n    d, i = [[], []], 0\n    while i < len(s):\n        j = i+1\n        while j < len(s) and s[j] == s[i]:\n            j += 1",
        "detail": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "description": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = II(), I()\n    d, i = [[], []], 0\n    while i < len(s):\n        j = i+1\n        while j < len(s) and s[j] == s[i]:\n            j += 1\n        heappush(d[int(s[i])], -(j-i))",
        "detail": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "description": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, s = II(), I()\n    d, i = [[], []], 0\n    while i < len(s):\n        j = i+1\n        while j < len(s) and s[j] == s[i]:\n            j += 1\n        heappush(d[int(s[i])], -(j-i))\n        i = j",
        "detail": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "description": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "peekOfCode": "def Solve():\n    n, s = II(), I()\n    d, i = [[], []], 0\n    while i < len(s):\n        j = i+1\n        while j < len(s) and s[j] == s[i]:\n            j += 1\n        heappush(d[int(s[i])], -(j-i))\n        i = j\n    c = len(d[0])+len(d[1])-1",
        "detail": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "description": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = II(), I()\n    d, i = [[], []], 0\n    while i < len(s):\n        j = i+1",
        "detail": "Chef_Loves_Beautiful_Strings_Easy_Version",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Colorful_Tree_Easy_Version",
        "description": "Colorful_Tree_Easy_Version",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    adj = [set() for i in range(n)]\n    for i in range(n-1):\n        a, b = M()\n        adj[a-1].add(b-1)",
        "detail": "Colorful_Tree_Easy_Version",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Colorful_Tree_Easy_Version",
        "description": "Colorful_Tree_Easy_Version",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    adj = [set() for i in range(n)]\n    for i in range(n-1):\n        a, b = M()\n        adj[a-1].add(b-1)\n        adj[b-1].add(a-1)",
        "detail": "Colorful_Tree_Easy_Version",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Colorful_Tree_Easy_Version",
        "description": "Colorful_Tree_Easy_Version",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    adj = [set() for i in range(n)]\n    for i in range(n-1):\n        a, b = M()\n        adj[a-1].add(b-1)\n        adj[b-1].add(a-1)\n    # adj.sort(key=lambda x: len(x))",
        "detail": "Colorful_Tree_Easy_Version",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Colorful_Tree_Easy_Version",
        "description": "Colorful_Tree_Easy_Version",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = II()\n    adj = [set() for i in range(n)]\n    for i in range(n-1):\n        a, b = M()\n        adj[a-1].add(b-1)\n        adj[b-1].add(a-1)\n    # adj.sort(key=lambda x: len(x))\n    # print(adj)",
        "detail": "Colorful_Tree_Easy_Version",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Colorful_Tree_Easy_Version",
        "description": "Colorful_Tree_Easy_Version",
        "peekOfCode": "def Solve():\n    n = II()\n    adj = [set() for i in range(n)]\n    for i in range(n-1):\n        a, b = M()\n        adj[a-1].add(b-1)\n        adj[b-1].add(a-1)\n    # adj.sort(key=lambda x: len(x))\n    # print(adj)\n    q = [3 if len(i) == 1 else 2 for ind, i in enumerate(adj)]",
        "detail": "Colorful_Tree_Easy_Version",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Colorful_Tree_Easy_Version",
        "description": "Colorful_Tree_Easy_Version",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    adj = [set() for i in range(n)]\n    for i in range(n-1):\n        a, b = M()",
        "detail": "Colorful_Tree_Easy_Version",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Convert_string",
        "description": "Convert_string",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    s = I()\n    one, zero = s.count('1'), s.count('0')\n    ans = ((n-min(one, zero))//2)\n    print(ans)",
        "detail": "Convert_string",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Convert_string",
        "description": "Convert_string",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    s = I()\n    one, zero = s.count('1'), s.count('0')\n    ans = ((n-min(one, zero))//2)\n    print(ans)\n    pass",
        "detail": "Convert_string",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Convert_string",
        "description": "Convert_string",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    s = I()\n    one, zero = s.count('1'), s.count('0')\n    ans = ((n-min(one, zero))//2)\n    print(ans)\n    pass\nif __name__ == \"__main__\":",
        "detail": "Convert_string",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Convert_string",
        "description": "Convert_string",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = II()\n    s = I()\n    one, zero = s.count('1'), s.count('0')\n    ans = ((n-min(one, zero))//2)\n    print(ans)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "Convert_string",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Convert_string",
        "description": "Convert_string",
        "peekOfCode": "def Solve():\n    n = II()\n    s = I()\n    one, zero = s.count('1'), s.count('0')\n    ans = ((n-min(one, zero))//2)\n    print(ans)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Convert_string",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Convert_string",
        "description": "Convert_string",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    s = I()\n    one, zero = s.count('1'), s.count('0')\n    ans = ((n-min(one, zero))//2)",
        "detail": "Convert_string",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    l = GL()\n    pass",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    l = GL()\n    pass\nif __name__ == \"__main__\":",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = II()\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    n = II()\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "def Solve():\n    n = II()\n    l = GL()\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Count_Triplets",
        "description": "Count_Triplets",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Count_Triplets",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Count_Winning_Subarrays",
        "description": "Count_Winning_Subarrays",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    (n, k), l = M(), GL()\n    for i in l:\n    pass",
        "detail": "Count_Winning_Subarrays",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Count_Winning_Subarrays",
        "description": "Count_Winning_Subarrays",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    (n, k), l = M(), GL()\n    for i in l:\n    pass\nif __name__ == \"__main__\":",
        "detail": "Count_Winning_Subarrays",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Count_Winning_Subarrays",
        "description": "Count_Winning_Subarrays",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    (n, k), l = M(), GL()\n    for i in l:\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Count_Winning_Subarrays",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Count_Winning_Subarrays",
        "description": "Count_Winning_Subarrays",
        "peekOfCode": "def II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    (n, k), l = M(), GL()\n    for i in l:\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Count_Winning_Subarrays",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Count_Winning_Subarrays",
        "description": "Count_Winning_Subarrays",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    (n, k), l = M(), GL()\n    for i in l:\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Count_Winning_Subarrays",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Count_Winning_Subarrays",
        "description": "Count_Winning_Subarrays",
        "peekOfCode": "def Solve():\n    (n, k), l = M(), GL()\n    for i in l:\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Count_Winning_Subarrays",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Count_Winning_Subarrays",
        "description": "Count_Winning_Subarrays",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    (n, k), l = M(), GL()",
        "detail": "Count_Winning_Subarrays",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Cricket_Tournament",
        "description": "Cricket_Tournament",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        a, b = list(map(int, input().split()))\n        c = 0\n        while a != 1:\n            # print(a)\n            c += a//2\n            a = (a >> 1)+(a != 1 and a & 1)\n        print('YES' if c >= b else 'NO')\nif __name__ == \"__main__\":",
        "detail": "Cricket_Tournament",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Destroying_Bridges_Part_2",
        "description": "Destroying_Bridges_Part_2",
        "peekOfCode": "def f(n, l, k):\n    stack = []\n    ans = 0\n    while l and k > 0:\n        s = sum(l[i]*l[0] for i in range(1, len(l)))\n        for i in stack:\n            s -= i*l[0]\n        # print(l[0], ans, k-s)\n        if k >= s:\n            ans += 1",
        "detail": "Destroying_Bridges_Part_2",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "Destroying_Bridges_Part_2",
        "description": "Destroying_Bridges_Part_2",
        "peekOfCode": "def g(first, rem, cost):\n    if cost >= sum(first*i for i in rem):\n        return 1\n    else:\n        return float('inf')\nwhile t:\n    n, k = list(map(int, input().split()))\n    first, *l = list(map(int, input().split()))\n    l.sort()\n    print(min(f(n, sorted([first]+l), k), g(first, l, k)))",
        "detail": "Destroying_Bridges_Part_2",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Destroying_Bridges_Part_2",
        "description": "Destroying_Bridges_Part_2",
        "peekOfCode": "t = int(input())\ndef f(n, l, k):\n    stack = []\n    ans = 0\n    while l and k > 0:\n        s = sum(l[i]*l[0] for i in range(1, len(l)))\n        for i in stack:\n            s -= i*l[0]\n        # print(l[0], ans, k-s)\n        if k >= s:",
        "detail": "Destroying_Bridges_Part_2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Dice_Game_3",
        "description": "Dice_Game_3",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n = int(input())\n        print(13*(n//2)+(6 if n & 1 else 0))\nif __name__ == \"__main__\":\n    main()",
        "detail": "Dice_Game_3",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Distribute_Cookies",
        "description": "Distribute_Cookies",
        "peekOfCode": "t = int(input())\nwhile t:\n    a, b = map(int, input().split())\n    if a > b:\n        print(a-b)\n    elif b-b//a*a < ceil(b/a)*a-b:\n        print(b-b//a*a)\n    else:\n        print(ceil(b/a)*a-b)\n    t -= 1",
        "detail": "Distribute_Cookies",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve(l):\n    while l:",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve(l):\n    while l:\n        l.sort(key=lambda x: -x)\n        print(l)\n        if len(l)-1 < l[0]:",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve(l):\n    while l:\n        l.sort(key=lambda x: -x)\n        print(l)\n        if len(l)-1 < l[0]:\n            return False",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve(l):\n    while l:\n        l.sort(key=lambda x: -x)\n        print(l)\n        if len(l)-1 < l[0]:\n            return False\n        for i in range(l.pop(0)):",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve(l):\n    while l:\n        l.sort(key=lambda x: -x)\n        print(l)\n        if len(l)-1 < l[0]:\n            return False\n        for i in range(l.pop(0)):\n            if l[i] >= 1:",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve(l):\n    while l:\n        l.sort(key=lambda x: -x)\n        print(l)\n        if len(l)-1 < l[0]:\n            return False\n        for i in range(l.pop(0)):\n            if l[i] >= 1:\n                l[i] -= 1",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "def Solve(l):\n    while l:\n        l.sort(key=lambda x: -x)\n        print(l)\n        if len(l)-1 < l[0]:\n            return False\n        for i in range(l.pop(0)):\n            if l[i] >= 1:\n                l[i] -= 1\n            else:",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Double_Trouble",
        "description": "Double_Trouble",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Double_Trouble",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Easy_Subarray_Sum",
        "description": "Easy_Subarray_Sum",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, arr = II(), GL()\n    l, r = 0, n-1\n    while l < n and arr[l] < 0:\n        l += 1\n    while r > l and arr[r] < 0:",
        "detail": "Easy_Subarray_Sum",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Easy_Subarray_Sum",
        "description": "Easy_Subarray_Sum",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, arr = II(), GL()\n    l, r = 0, n-1\n    while l < n and arr[l] < 0:\n        l += 1\n    while r > l and arr[r] < 0:\n        r -= 1",
        "detail": "Easy_Subarray_Sum",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Easy_Subarray_Sum",
        "description": "Easy_Subarray_Sum",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, arr = II(), GL()\n    l, r = 0, n-1\n    while l < n and arr[l] < 0:\n        l += 1\n    while r > l and arr[r] < 0:\n        r -= 1\n    ans = 0",
        "detail": "Easy_Subarray_Sum",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Easy_Subarray_Sum",
        "description": "Easy_Subarray_Sum",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, arr = II(), GL()\n    l, r = 0, n-1\n    while l < n and arr[l] < 0:\n        l += 1\n    while r > l and arr[r] < 0:\n        r -= 1\n    ans = 0\n    for i in range(l, r+1):",
        "detail": "Easy_Subarray_Sum",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Easy_Subarray_Sum",
        "description": "Easy_Subarray_Sum",
        "peekOfCode": "def Solve():\n    n, arr = II(), GL()\n    l, r = 0, n-1\n    while l < n and arr[l] < 0:\n        l += 1\n    while r > l and arr[r] < 0:\n        r -= 1\n    ans = 0\n    for i in range(l, r+1):\n        if arr[i] < 0:",
        "detail": "Easy_Subarray_Sum",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Easy_Subarray_Sum",
        "description": "Easy_Subarray_Sum",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, arr = II(), GL()\n    l, r = 0, n-1\n    while l < n and arr[l] < 0:\n        l += 1",
        "detail": "Easy_Subarray_Sum",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 6,
        "importPath": "EnumerateTest",
        "description": "EnumerateTest",
        "peekOfCode": "class F:\n    def __init__(self, name):\n        self.name = name\ng = F\nprint(g, g(\"hello\").name)\ndef makeEnum(name, dicctionary):\n    i = j = None\n    class E:\n        nonlocal i, j\n        for i, j in dicctionary.items():",
        "detail": "EnumerateTest",
        "documentation": {}
    },
    {
        "label": "makeEnum",
        "kind": 2,
        "importPath": "EnumerateTest",
        "description": "EnumerateTest",
        "peekOfCode": "def makeEnum(name, dicctionary):\n    i = j = None\n    class E:\n        nonlocal i, j\n        for i, j in dicctionary.items():\n            print(i, j)\n            locals()[i] = j\n        def __init__(self) -> None:\n            x = 10\n            print(locals()['self'])",
        "detail": "EnumerateTest",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "EnumerateTest",
        "description": "EnumerateTest",
        "peekOfCode": "g = F\nprint(g, g(\"hello\").name)\ndef makeEnum(name, dicctionary):\n    i = j = None\n    class E:\n        nonlocal i, j\n        for i, j in dicctionary.items():\n            print(i, j)\n            locals()[i] = j\n        def __init__(self) -> None:",
        "detail": "EnumerateTest",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Equality_Etiquette",
        "description": "Equality_Etiquette",
        "peekOfCode": "def GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\n@cache\ndef f(n, i=1):\n    if n == i:\n        return 0\n    elif\ndef Solve(l):\n    a, b = GetL()",
        "detail": "Equality_Etiquette",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Equality_Etiquette",
        "description": "Equality_Etiquette",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\n@cache\ndef f(n, i=1):\n    if n == i:\n        return 0\n    elif\ndef Solve(l):\n    a, b = GetL()\nl, d = [], []",
        "detail": "Equality_Etiquette",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Equality_Etiquette",
        "description": "Equality_Etiquette",
        "peekOfCode": "def GetI(): return int(GetS())\n@cache\ndef f(n, i=1):\n    if n == i:\n        return 0\n    elif\ndef Solve(l):\n    a, b = GetL()\nl, d = [], []\nif __name__ == \"__main__\":",
        "detail": "Equality_Etiquette",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Equality_Etiquette",
        "description": "Equality_Etiquette",
        "peekOfCode": "def f(n, i=1):\n    if n == i:\n        return 0\n    elif\ndef Solve(l):\n    a, b = GetL()\nl, d = [], []\nif __name__ == \"__main__\":\n    l = [list(GetL()) for i in range(int(input()))]\n    d = [None]*max([abs(x-y)+1 for x, y in l])",
        "detail": "Equality_Etiquette",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Equality_Etiquette",
        "description": "Equality_Etiquette",
        "peekOfCode": "def Solve(l):\n    a, b = GetL()\nl, d = [], []\nif __name__ == \"__main__\":\n    l = [list(GetL()) for i in range(int(input()))]\n    d = [None]*max([abs(x-y)+1 for x, y in l])\n    Solve()",
        "detail": "Equality_Etiquette",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Equality_Etiquette",
        "description": "Equality_Etiquette",
        "peekOfCode": "mod = 10**9+7\ndef GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\n@cache\ndef f(n, i=1):\n    if n == i:\n        return 0\n    elif\ndef Solve(l):",
        "detail": "Equality_Etiquette",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Equal_Pairs_Easy",
        "description": "Equal_Pairs_Easy",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL(rtype=Counter)\n    zero = l[0]\n    ans, mx, added = 0, 0, 0\n    del l[0]",
        "detail": "Equal_Pairs_Easy",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Equal_Pairs_Easy",
        "description": "Equal_Pairs_Easy",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL(rtype=Counter)\n    zero = l[0]\n    ans, mx, added = 0, 0, 0\n    del l[0]\n    if l:",
        "detail": "Equal_Pairs_Easy",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Equal_Pairs_Easy",
        "description": "Equal_Pairs_Easy",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL(rtype=Counter)\n    zero = l[0]\n    ans, mx, added = 0, 0, 0\n    del l[0]\n    if l:\n        mx = max([((l[i]+zero)*(l[i]+zero-1)//2, i) for i in l])",
        "detail": "Equal_Pairs_Easy",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Equal_Pairs_Easy",
        "description": "Equal_Pairs_Easy",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL(rtype=Counter)\n    zero = l[0]\n    ans, mx, added = 0, 0, 0\n    del l[0]\n    if l:\n        mx = max([((l[i]+zero)*(l[i]+zero-1)//2, i) for i in l])\n        del l[mx[1]]",
        "detail": "Equal_Pairs_Easy",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Equal_Pairs_Easy",
        "description": "Equal_Pairs_Easy",
        "peekOfCode": "def Solve():\n    n = II()\n    l = GL(rtype=Counter)\n    zero = l[0]\n    ans, mx, added = 0, 0, 0\n    del l[0]\n    if l:\n        mx = max([((l[i]+zero)*(l[i]+zero-1)//2, i) for i in l])\n        del l[mx[1]]\n        print(sum(l[i]*(l[i]-1)//2 for i in l)+mx[0])",
        "detail": "Equal_Pairs_Easy",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Equal_Pairs_Easy",
        "description": "Equal_Pairs_Easy",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    l = GL(rtype=Counter)\n    zero = l[0]\n    ans, mx, added = 0, 0, 0",
        "detail": "Equal_Pairs_Easy",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Equal_Pairs_Hard",
        "description": "Equal_Pairs_Hard",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    zero = II()\n    q = [GL() for i in range(zero)]\n    l, ans = Counter(), []\n    cur, sum, mx, added = defaultdict(int), 0, -1, 0\n    for x, y in q:",
        "detail": "Equal_Pairs_Hard",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Equal_Pairs_Hard",
        "description": "Equal_Pairs_Hard",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    zero = II()\n    q = [GL() for i in range(zero)]\n    l, ans = Counter(), []\n    cur, sum, mx, added = defaultdict(int), 0, -1, 0\n    for x, y in q:\n        l[y] += 1",
        "detail": "Equal_Pairs_Hard",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Equal_Pairs_Hard",
        "description": "Equal_Pairs_Hard",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    zero = II()\n    q = [GL() for i in range(zero)]\n    l, ans = Counter(), []\n    cur, sum, mx, added = defaultdict(int), 0, -1, 0\n    for x, y in q:\n        l[y] += 1\n        zero -= 1",
        "detail": "Equal_Pairs_Hard",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Equal_Pairs_Hard",
        "description": "Equal_Pairs_Hard",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    zero = II()\n    q = [GL() for i in range(zero)]\n    l, ans = Counter(), []\n    cur, sum, mx, added = defaultdict(int), 0, -1, 0\n    for x, y in q:\n        l[y] += 1\n        zero -= 1\n        if l[mx] < l[y]:",
        "detail": "Equal_Pairs_Hard",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Equal_Pairs_Hard",
        "description": "Equal_Pairs_Hard",
        "peekOfCode": "def Solve():\n    zero = II()\n    q = [GL() for i in range(zero)]\n    l, ans = Counter(), []\n    cur, sum, mx, added = defaultdict(int), 0, -1, 0\n    for x, y in q:\n        l[y] += 1\n        zero -= 1\n        if l[mx] < l[y]:\n            ans.append(sum-cur[y]+(zero+l[y])*(zero+l[y]-1)//2)",
        "detail": "Equal_Pairs_Hard",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Equal_Pairs_Hard",
        "description": "Equal_Pairs_Hard",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    zero = II()\n    q = [GL() for i in range(zero)]\n    l, ans = Counter(), []\n    cur, sum, mx, added = defaultdict(int), 0, -1, 0",
        "detail": "Equal_Pairs_Hard",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    p = [0, 0]\n    for i in l:\n        p[i & 1] += 1",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    p = [0, 0]\n    for i in l:\n        p[i & 1] += 1\n    if p[1] == 0:",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    p = [0, 0]\n    for i in l:\n        p[i & 1] += 1\n    if p[1] == 0:\n        print(0)",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    p = [0, 0]\n    for i in l:\n        p[i & 1] += 1\n    if p[1] == 0:\n        print(0)\n    else:",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    p = [0, 0]\n    for i in l:\n        p[i & 1] += 1\n    if p[1] == 0:\n        print(0)\n    else:\n        print(p[0] + ceil(p[1]/2))",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "def Solve():\n    n, l = II(), GL()\n    p = [0, 0]\n    for i in l:\n        p[i & 1] += 1\n    if p[1] == 0:\n        print(0)\n    else:\n        print(p[0] + ceil(p[1]/2))\n    pass",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Even_Numbers_Hate",
        "description": "Even_Numbers_Hate",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Even_Numbers_Hate",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "FightBots",
        "description": "FightBots",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\nd = {'R': (0, 1), 'L': (0, -1), 'U': (1, 0), 'D': (-1, 0)}\ndef Solve():\n    a, b, c = M()\n    x, y = 0, 0\n    f = 0",
        "detail": "FightBots",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "FightBots",
        "description": "FightBots",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\nd = {'R': (0, 1), 'L': (0, -1), 'U': (1, 0), 'D': (-1, 0)}\ndef Solve():\n    a, b, c = M()\n    x, y = 0, 0\n    f = 0\n    for ind, i in enumerate(I()):\n        v2, v1 = d[i]",
        "detail": "FightBots",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "FightBots",
        "description": "FightBots",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\nd = {'R': (0, 1), 'L': (0, -1), 'U': (1, 0), 'D': (-1, 0)}\ndef Solve():\n    a, b, c = M()\n    x, y = 0, 0\n    f = 0\n    for ind, i in enumerate(I()):\n        v2, v1 = d[i]\n        x, y = x+v1, y+v2",
        "detail": "FightBots",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "FightBots",
        "description": "FightBots",
        "peekOfCode": "def II(): return int(I())\nd = {'R': (0, 1), 'L': (0, -1), 'U': (1, 0), 'D': (-1, 0)}\ndef Solve():\n    a, b, c = M()\n    x, y = 0, 0\n    f = 0\n    for ind, i in enumerate(I()):\n        v2, v1 = d[i]\n        x, y = x+v1, y+v2\n        if not f and abs(x-b) + abs(y-c) == ind+1:",
        "detail": "FightBots",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "FightBots",
        "description": "FightBots",
        "peekOfCode": "def Solve():\n    a, b, c = M()\n    x, y = 0, 0\n    f = 0\n    for ind, i in enumerate(I()):\n        v2, v1 = d[i]\n        x, y = x+v1, y+v2\n        if not f and abs(x-b) + abs(y-c) == ind+1:\n            f = 1\n            print('Yes')",
        "detail": "FightBots",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "FightBots",
        "description": "FightBots",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\nd = {'R': (0, 1), 'L': (0, -1), 'U': (1, 0), 'D': (-1, 0)}\ndef Solve():\n    a, b, c = M()",
        "detail": "FightBots",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "FightBots",
        "description": "FightBots",
        "peekOfCode": "d = {'R': (0, 1), 'L': (0, -1), 'U': (1, 0), 'D': (-1, 0)}\ndef Solve():\n    a, b, c = M()\n    x, y = 0, 0\n    f = 0\n    for ind, i in enumerate(I()):\n        v2, v1 = d[i]\n        x, y = x+v1, y+v2\n        if not f and abs(x-b) + abs(y-c) == ind+1:\n            f = 1",
        "detail": "FightBots",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Find_Multiset_State",
        "description": "Find_Multiset_State",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, k = M()\n    l = GL()\n    if n == k+1:\n        print(sum(l))\n    else:",
        "detail": "Find_Multiset_State",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Find_Multiset_State",
        "description": "Find_Multiset_State",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, k = M()\n    l = GL()\n    if n == k+1:\n        print(sum(l))\n    else:\n        mx = []",
        "detail": "Find_Multiset_State",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Find_Multiset_State",
        "description": "Find_Multiset_State",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, k = M()\n    l = GL()\n    if n == k+1:\n        print(sum(l))\n    else:\n        mx = []\n        for i in range(k):",
        "detail": "Find_Multiset_State",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Find_Multiset_State",
        "description": "Find_Multiset_State",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, k = M()\n    l = GL()\n    if n == k+1:\n        print(sum(l))\n    else:\n        mx = []\n        for i in range(k):\n            if mx and mx[0] > l[-1]:",
        "detail": "Find_Multiset_State",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Find_Multiset_State",
        "description": "Find_Multiset_State",
        "peekOfCode": "def Solve():\n    n, k = M()\n    l = GL()\n    if n == k+1:\n        print(sum(l))\n    else:\n        mx = []\n        for i in range(k):\n            if mx and mx[0] > l[-1]:\n                curm = heappop(mx)",
        "detail": "Find_Multiset_State",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Find_Multiset_State",
        "description": "Find_Multiset_State",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, k = M()\n    l = GL()\n    if n == k+1:\n        print(sum(l))",
        "detail": "Find_Multiset_State",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Frequal",
        "description": "Frequal",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Frequal",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Frequal",
        "description": "Frequal",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Frequal",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Frequal",
        "description": "Frequal",
        "peekOfCode": "def GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1",
        "detail": "Frequal",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Frequal",
        "description": "Frequal",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\ndef primeFactors(n):",
        "detail": "Frequal",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Frequal",
        "description": "Frequal",
        "peekOfCode": "def GetI(): return int(GetS())\ndef getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\ndef primeFactors(n):\n    l = Counter()",
        "detail": "Frequal",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Frequal",
        "description": "Frequal",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\ndef primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):",
        "detail": "Frequal",
        "documentation": {}
    },
    {
        "label": "primeFactors",
        "kind": 2,
        "importPath": "Frequal",
        "description": "Frequal",
        "peekOfCode": "def primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        if n == 1:\n            return l\n    if n != 1:\n        l[n] += 1",
        "detail": "Frequal",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Frequal",
        "description": "Frequal",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Frequal",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Frequal",
        "description": "Frequal",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Frequal",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Frequal",
        "description": "Frequal",
        "peekOfCode": "def Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Frequal",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Frequal",
        "description": "Frequal",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Frequal",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "GCD_and_XOR",
        "description": "GCD_and_XOR",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n, k = M()\n    l = GL(rtype=set)\n    if all(x == k for x in l):",
        "detail": "GCD_and_XOR",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "GCD_and_XOR",
        "description": "GCD_and_XOR",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n, k = M()\n    l = GL(rtype=set)\n    if all(x == k for x in l):\n        print(0)\n    elif all(gcd(x, k) == k for x in l) or len(set(l)) == 1:",
        "detail": "GCD_and_XOR",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "GCD_and_XOR",
        "description": "GCD_and_XOR",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n, k = M()\n    l = GL(rtype=set)\n    if all(x == k for x in l):\n        print(0)\n    elif all(gcd(x, k) == k for x in l) or len(set(l)) == 1:\n        print(1)",
        "detail": "GCD_and_XOR",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "GCD_and_XOR",
        "description": "GCD_and_XOR",
        "peekOfCode": "def II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n, k = M()\n    l = GL(rtype=set)\n    if all(x == k for x in l):\n        print(0)\n    elif all(gcd(x, k) == k for x in l) or len(set(l)) == 1:\n        print(1)\n    else:",
        "detail": "GCD_and_XOR",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "GCD_and_XOR",
        "description": "GCD_and_XOR",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n, k = M()\n    l = GL(rtype=set)\n    if all(x == k for x in l):\n        print(0)\n    elif all(gcd(x, k) == k for x in l) or len(set(l)) == 1:\n        print(1)\n    else:\n        print(2)",
        "detail": "GCD_and_XOR",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "GCD_and_XOR",
        "description": "GCD_and_XOR",
        "peekOfCode": "def Solve():\n    n, k = M()\n    l = GL(rtype=set)\n    if all(x == k for x in l):\n        print(0)\n    elif all(gcd(x, k) == k for x in l) or len(set(l)) == 1:\n        print(1)\n    else:\n        print(2)\n    pass",
        "detail": "GCD_and_XOR",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "GCD_and_XOR",
        "description": "GCD_and_XOR",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n, k = M()",
        "detail": "GCD_and_XOR",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    ans = [l[-1]]\n    for i in range(n-2, -1, -1):\n        if l[i+1] > l[i] or l[i] % l[i+1] != 0:",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    ans = [l[-1]]\n    for i in range(n-2, -1, -1):\n        if l[i+1] > l[i] or l[i] % l[i+1] != 0:\n            break",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    ans = [l[-1]]\n    for i in range(n-2, -1, -1):\n        if l[i+1] > l[i] or l[i] % l[i+1] != 0:\n            break\n        else:",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    ans = [l[-1]]\n    for i in range(n-2, -1, -1):\n        if l[i+1] > l[i] or l[i] % l[i+1] != 0:\n            break\n        else:\n            ans.append(l[i])",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    ans = [l[-1]]\n    for i in range(n-2, -1, -1):\n        if l[i+1] > l[i] or l[i] % l[i+1] != 0:\n            break\n        else:\n            ans.append(l[i])\n    print(*(ans[::-1] if len(ans) == n else [-1]))",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "def Solve():\n    n, l = II(), GL()\n    ans = [l[-1]]\n    for i in range(n-2, -1, -1):\n        if l[i+1] > l[i] or l[i] % l[i+1] != 0:\n            break\n        else:\n            ans.append(l[i])\n    print(*(ans[::-1] if len(ans) == n else [-1]))\nif __name__ == \"__main__\":",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "GCD_of_Prefixes",
        "description": "GCD_of_Prefixes",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "GCD_of_Prefixes",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "GCD_to_1_Easy",
        "description": "GCD_to_1_Easy",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)",
        "detail": "GCD_to_1_Easy",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "GCD_to_1_Easy",
        "description": "GCD_to_1_Easy",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):",
        "detail": "GCD_to_1_Easy",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "GCD_to_1_Easy",
        "description": "GCD_to_1_Easy",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "GCD_to_1_Easy",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "GCD_to_1_Easy",
        "description": "GCD_to_1_Easy",
        "peekOfCode": "def II(): return int(I())\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "GCD_to_1_Easy",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "GCD_to_1_Easy",
        "description": "GCD_to_1_Easy",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "GCD_to_1_Easy",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "GCD_to_1_Easy",
        "description": "GCD_to_1_Easy",
        "peekOfCode": "def Solve():\n    a, b = M()\n    mn = max(a, b)\n    for i in range(a):\n        print(*[primes[(i+j) % (mn)] for j in range(b)])\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "GCD_to_1_Easy",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "GCD_to_1_Easy",
        "description": "GCD_to_1_Easy",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:",
        "detail": "GCD_to_1_Easy",
        "documentation": {}
    },
    {
        "label": "primes",
        "kind": 5,
        "importPath": "GCD_to_1_Easy",
        "description": "GCD_to_1_Easy",
        "peekOfCode": "primes = Seieve(3*10**6)\nprint(len(primes))\ndef Solve():\n    a, b = M()\n    mn = max(a, b)\n    for i in range(a):\n        print(*[primes[(i+j) % (mn)] for j in range(b)])\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "GCD_to_1_Easy",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "GCD_to_1_Hard",
        "description": "GCD_to_1_Hard",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = [[2]*b for i in range(a)]\n    pos = 0\n    for i in range(max(a, b)):\n        l[i % a][pos % b] = 3",
        "detail": "GCD_to_1_Hard",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "GCD_to_1_Hard",
        "description": "GCD_to_1_Hard",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = [[2]*b for i in range(a)]\n    pos = 0\n    for i in range(max(a, b)):\n        l[i % a][pos % b] = 3\n        pos += 1",
        "detail": "GCD_to_1_Hard",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "GCD_to_1_Hard",
        "description": "GCD_to_1_Hard",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = [[2]*b for i in range(a)]\n    pos = 0\n    for i in range(max(a, b)):\n        l[i % a][pos % b] = 3\n        pos += 1\n    for i in l:",
        "detail": "GCD_to_1_Hard",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "GCD_to_1_Hard",
        "description": "GCD_to_1_Hard",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = [[2]*b for i in range(a)]\n    pos = 0\n    for i in range(max(a, b)):\n        l[i % a][pos % b] = 3\n        pos += 1\n    for i in l:\n        print(*i)",
        "detail": "GCD_to_1_Hard",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "GCD_to_1_Hard",
        "description": "GCD_to_1_Hard",
        "peekOfCode": "def Solve():\n    a, b = M()\n    l = [[2]*b for i in range(a)]\n    pos = 0\n    for i in range(max(a, b)):\n        l[i % a][pos % b] = 3\n        pos += 1\n    for i in l:\n        print(*i)\nif __name__ == \"__main__\":",
        "detail": "GCD_to_1_Hard",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "GCD_to_1_Hard",
        "description": "GCD_to_1_Hard",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    l = [[2]*b for i in range(a)]\n    pos = 0\n    for i in range(max(a, b)):",
        "detail": "GCD_to_1_Hard",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Gun_Master",
        "description": "Gun_Master",
        "peekOfCode": "def M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M(int)\n    l = GL(int)\n    ini = 0 if l[0] <= b else 1\n    i, ans = 0, (1 if ini else 0)\n    while i < len(l):",
        "detail": "Gun_Master",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Gun_Master",
        "description": "Gun_Master",
        "peekOfCode": "def GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M(int)\n    l = GL(int)\n    ini = 0 if l[0] <= b else 1\n    i, ans = 0, (1 if ini else 0)\n    while i < len(l):\n        v = i",
        "detail": "Gun_Master",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Gun_Master",
        "description": "Gun_Master",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M(int)\n    l = GL(int)\n    ini = 0 if l[0] <= b else 1\n    i, ans = 0, (1 if ini else 0)\n    while i < len(l):\n        v = i\n        while i < len(l) and ((ini and l[i] > b) or (not ini and l[i] <= b)):",
        "detail": "Gun_Master",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Gun_Master",
        "description": "Gun_Master",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b = M(int)\n    l = GL(int)\n    ini = 0 if l[0] <= b else 1\n    i, ans = 0, (1 if ini else 0)\n    while i < len(l):\n        v = i\n        while i < len(l) and ((ini and l[i] > b) or (not ini and l[i] <= b)):\n            i += 1",
        "detail": "Gun_Master",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Gun_Master",
        "description": "Gun_Master",
        "peekOfCode": "def Solve():\n    a, b = M(int)\n    l = GL(int)\n    ini = 0 if l[0] <= b else 1\n    i, ans = 0, (1 if ini else 0)\n    while i < len(l):\n        v = i\n        while i < len(l) and ((ini and l[i] > b) or (not ini and l[i] <= b)):\n            i += 1\n        # print(l[v:i])",
        "detail": "Gun_Master",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Gun_Master",
        "description": "Gun_Master",
        "peekOfCode": "mod = 10**9+7\ndef M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M(int)\n    l = GL(int)\n    ini = 0 if l[0] <= b else 1\n    i, ans = 0, (1 if ini else 0)",
        "detail": "Gun_Master",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Hotel_Bytelandia",
        "description": "Hotel_Bytelandia",
        "peekOfCode": "def GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    l = [(i, 1) for i in GetL(int)]+[(i, 0) for i in GetL(int)]\n    l.sort()\n    ans, o = 0, 0\n    for x, y in l:\n        if y == 1:",
        "detail": "Hotel_Bytelandia",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Hotel_Bytelandia",
        "description": "Hotel_Bytelandia",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    l = [(i, 1) for i in GetL(int)]+[(i, 0) for i in GetL(int)]\n    l.sort()\n    ans, o = 0, 0\n    for x, y in l:\n        if y == 1:\n            o += 1",
        "detail": "Hotel_Bytelandia",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Hotel_Bytelandia",
        "description": "Hotel_Bytelandia",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    l = [(i, 1) for i in GetL(int)]+[(i, 0) for i in GetL(int)]\n    l.sort()\n    ans, o = 0, 0\n    for x, y in l:\n        if y == 1:\n            o += 1\n        elif y == 0:",
        "detail": "Hotel_Bytelandia",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Hotel_Bytelandia",
        "description": "Hotel_Bytelandia",
        "peekOfCode": "def Solve():\n    n = GetI()\n    l = [(i, 1) for i in GetL(int)]+[(i, 0) for i in GetL(int)]\n    l.sort()\n    ans, o = 0, 0\n    for x, y in l:\n        if y == 1:\n            o += 1\n        elif y == 0:\n            o -= 1",
        "detail": "Hotel_Bytelandia",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Hotel_Bytelandia",
        "description": "Hotel_Bytelandia",
        "peekOfCode": "mod = 10**9+7\ndef GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    l = [(i, 1) for i in GetL(int)]+[(i, 0) for i in GetL(int)]\n    l.sort()\n    ans, o = 0, 0\n    for x, y in l:",
        "detail": "Hotel_Bytelandia",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Independence_Day_101",
        "description": "Independence_Day_101",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = list(-i for i in GL())\n    heapify(l)\n    while len(l) > 1:\n        (a), (c) = heappop(l), heappop(l)\n        if a == 0 or c == 0:",
        "detail": "Independence_Day_101",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Independence_Day_101",
        "description": "Independence_Day_101",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = list(-i for i in GL())\n    heapify(l)\n    while len(l) > 1:\n        (a), (c) = heappop(l), heappop(l)\n        if a == 0 or c == 0:\n            heappush(l, min(0, c+1))",
        "detail": "Independence_Day_101",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Independence_Day_101",
        "description": "Independence_Day_101",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = list(-i for i in GL())\n    heapify(l)\n    while len(l) > 1:\n        (a), (c) = heappop(l), heappop(l)\n        if a == 0 or c == 0:\n            heappush(l, min(0, c+1))\n            heappush(l, min(0, a+1))",
        "detail": "Independence_Day_101",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Independence_Day_101",
        "description": "Independence_Day_101",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    l = list(-i for i in GL())\n    heapify(l)\n    while len(l) > 1:\n        (a), (c) = heappop(l), heappop(l)\n        if a == 0 or c == 0:\n            heappush(l, min(0, c+1))\n            heappush(l, min(0, a+1))\n            break",
        "detail": "Independence_Day_101",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Independence_Day_101",
        "description": "Independence_Day_101",
        "peekOfCode": "def Solve():\n    l = list(-i for i in GL())\n    heapify(l)\n    while len(l) > 1:\n        (a), (c) = heappop(l), heappop(l)\n        if a == 0 or c == 0:\n            heappush(l, min(0, c+1))\n            heappush(l, min(0, a+1))\n            break\n        heappush(l, a+1)",
        "detail": "Independence_Day_101",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Independence_Day_101",
        "description": "Independence_Day_101",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = list(-i for i in GL())\n    heapify(l)\n    while len(l) > 1:\n        (a), (c) = heappop(l), heappop(l)",
        "detail": "Independence_Day_101",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "International_Gym_Day",
        "description": "International_Gym_Day",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c = M()\n    d = 0\n    while c-d > 0 and (b)*(100-d*a)/100 > c-d:\n        # print((b)*(100-d*a)/100, c-d)\n        d += 1",
        "detail": "International_Gym_Day",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "International_Gym_Day",
        "description": "International_Gym_Day",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c = M()\n    d = 0\n    while c-d > 0 and (b)*(100-d*a)/100 > c-d:\n        # print((b)*(100-d*a)/100, c-d)\n        d += 1\n    print(d if (b)*(100-d*a)/100 <= c-d else -1)",
        "detail": "International_Gym_Day",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "International_Gym_Day",
        "description": "International_Gym_Day",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c = M()\n    d = 0\n    while c-d > 0 and (b)*(100-d*a)/100 > c-d:\n        # print((b)*(100-d*a)/100, c-d)\n        d += 1\n    print(d if (b)*(100-d*a)/100 <= c-d else -1)\n    pass",
        "detail": "International_Gym_Day",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "International_Gym_Day",
        "description": "International_Gym_Day",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b, c = M()\n    d = 0\n    while c-d > 0 and (b)*(100-d*a)/100 > c-d:\n        # print((b)*(100-d*a)/100, c-d)\n        d += 1\n    print(d if (b)*(100-d*a)/100 <= c-d else -1)\n    pass\nif __name__ == \"__main__\":",
        "detail": "International_Gym_Day",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "International_Gym_Day",
        "description": "International_Gym_Day",
        "peekOfCode": "def Solve():\n    a, b, c = M()\n    d = 0\n    while c-d > 0 and (b)*(100-d*a)/100 > c-d:\n        # print((b)*(100-d*a)/100, c-d)\n        d += 1\n    print(d if (b)*(100-d*a)/100 <= c-d else -1)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "International_Gym_Day",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "International_Gym_Day",
        "description": "International_Gym_Day",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c = M()\n    d = 0\n    while c-d > 0 and (b)*(100-d*a)/100 > c-d:\n        # print((b)*(100-d*a)/100, c-d)",
        "detail": "International_Gym_Day",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Kill_Monsters_Easy_Version",
        "description": "Kill_Monsters_Easy_Version",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, h, mul = M()\n    a, b = [], []\n    for x, y in sorted(GL(Counter).items()):\n        a.append(x)\n        b.append((y > 1)+(b[-1] if b else 0))",
        "detail": "Kill_Monsters_Easy_Version",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Kill_Monsters_Easy_Version",
        "description": "Kill_Monsters_Easy_Version",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, h, mul = M()\n    a, b = [], []\n    for x, y in sorted(GL(Counter).items()):\n        a.append(x)\n        b.append((y > 1)+(b[-1] if b else 0))\n    print(a, b)",
        "detail": "Kill_Monsters_Easy_Version",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Kill_Monsters_Easy_Version",
        "description": "Kill_Monsters_Easy_Version",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, h, mul = M()\n    a, b = [], []\n    for x, y in sorted(GL(Counter).items()):\n        a.append(x)\n        b.append((y > 1)+(b[-1] if b else 0))\n    print(a, b)\n    c = 0",
        "detail": "Kill_Monsters_Easy_Version",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Kill_Monsters_Easy_Version",
        "description": "Kill_Monsters_Easy_Version",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, h, mul = M()\n    a, b = [], []\n    for x, y in sorted(GL(Counter).items()):\n        a.append(x)\n        b.append((y > 1)+(b[-1] if b else 0))\n    print(a, b)\n    c = 0\n    ans = 0",
        "detail": "Kill_Monsters_Easy_Version",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Kill_Monsters_Easy_Version",
        "description": "Kill_Monsters_Easy_Version",
        "peekOfCode": "def Solve():\n    n, h, mul = M()\n    a, b = [], []\n    for x, y in sorted(GL(Counter).items()):\n        a.append(x)\n        b.append((y > 1)+(b[-1] if b else 0))\n    print(a, b)\n    c = 0\n    ans = 0\n    for i in range(bisect_left(a, x)-1, -1, -1):",
        "detail": "Kill_Monsters_Easy_Version",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Kill_Monsters_Easy_Version",
        "description": "Kill_Monsters_Easy_Version",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, h, mul = M()\n    a, b = [], []\n    for x, y in sorted(GL(Counter).items()):\n        a.append(x)",
        "detail": "Kill_Monsters_Easy_Version",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Knockout_tournament",
        "description": "Knockout_tournament",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = sorted([(i, ind) for ind, i in enumerate(GL())])\n    # print(sorted([(int(y), x)\n    #   for x, y in zip(l, \"3 3 4 3 1 3 3 0 2 3 2 2 1 3 2 3\".split())]))\n    ini, ans = 0, [0]*16\n    for i, (x, y) in enumerate(l):",
        "detail": "Knockout_tournament",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Knockout_tournament",
        "description": "Knockout_tournament",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = sorted([(i, ind) for ind, i in enumerate(GL())])\n    # print(sorted([(int(y), x)\n    #   for x, y in zip(l, \"3 3 4 3 1 3 3 0 2 3 2 2 1 3 2 3\".split())]))\n    ini, ans = 0, [0]*16\n    for i, (x, y) in enumerate(l):\n        if (i+1) & (i) == 0:",
        "detail": "Knockout_tournament",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Knockout_tournament",
        "description": "Knockout_tournament",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = sorted([(i, ind) for ind, i in enumerate(GL())])\n    # print(sorted([(int(y), x)\n    #   for x, y in zip(l, \"3 3 4 3 1 3 3 0 2 3 2 2 1 3 2 3\".split())]))\n    ini, ans = 0, [0]*16\n    for i, (x, y) in enumerate(l):\n        if (i+1) & (i) == 0:\n            ini += 1",
        "detail": "Knockout_tournament",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Knockout_tournament",
        "description": "Knockout_tournament",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    l = sorted([(i, ind) for ind, i in enumerate(GL())])\n    # print(sorted([(int(y), x)\n    #   for x, y in zip(l, \"3 3 4 3 1 3 3 0 2 3 2 2 1 3 2 3\".split())]))\n    ini, ans = 0, [0]*16\n    for i, (x, y) in enumerate(l):\n        if (i+1) & (i) == 0:\n            ini += 1\n        ans[y] = ini-1",
        "detail": "Knockout_tournament",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Knockout_tournament",
        "description": "Knockout_tournament",
        "peekOfCode": "def Solve():\n    l = sorted([(i, ind) for ind, i in enumerate(GL())])\n    # print(sorted([(int(y), x)\n    #   for x, y in zip(l, \"3 3 4 3 1 3 3 0 2 3 2 2 1 3 2 3\".split())]))\n    ini, ans = 0, [0]*16\n    for i, (x, y) in enumerate(l):\n        if (i+1) & (i) == 0:\n            ini += 1\n        ans[y] = ini-1\n    print(*ans)",
        "detail": "Knockout_tournament",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Knockout_tournament",
        "description": "Knockout_tournament",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = sorted([(i, ind) for ind, i in enumerate(GL())])\n    # print(sorted([(int(y), x)\n    #   for x, y in zip(l, \"3 3 4 3 1 3 3 0 2 3 2 2 1 3 2 3\".split())]))\n    ini, ans = 0, [0]*16",
        "detail": "Knockout_tournament",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "K_Subsequence_101",
        "description": "K_Subsequence_101",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    (a, b) ,l= M(),GL()\n    mx=0\n    for i in range(1,a):\n        if \n    pass",
        "detail": "K_Subsequence_101",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "K_Subsequence_101",
        "description": "K_Subsequence_101",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    (a, b) ,l= M(),GL()\n    mx=0\n    for i in range(1,a):\n        if \n    pass\nif __name__ == \"__main__\":",
        "detail": "K_Subsequence_101",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "K_Subsequence_101",
        "description": "K_Subsequence_101",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    (a, b) ,l= M(),GL()\n    mx=0\n    for i in range(1,a):\n        if \n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "K_Subsequence_101",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "K_Subsequence_101",
        "description": "K_Subsequence_101",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    (a, b) ,l= M(),GL()\n    mx=0\n    for i in range(1,a):\n        if \n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "K_Subsequence_101",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "K_Subsequence_101",
        "description": "K_Subsequence_101",
        "peekOfCode": "def Solve():\n    (a, b) ,l= M(),GL()\n    mx=0\n    for i in range(1,a):\n        if \n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "K_Subsequence_101",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "K_Subsequence_101",
        "description": "K_Subsequence_101",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    (a, b) ,l= M(),GL()\n    mx=0\n    for i in range(1,a):\n        if ",
        "detail": "K_Subsequence_101",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Largest_K",
        "description": "Largest_K",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Largest_K",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Largest_K",
        "description": "Largest_K",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Largest_K",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Largest_K",
        "description": "Largest_K",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\ndef primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):",
        "detail": "Largest_K",
        "documentation": {}
    },
    {
        "label": "primeFactors",
        "kind": 2,
        "importPath": "Largest_K",
        "description": "Largest_K",
        "peekOfCode": "def primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        if n == 1:\n            return l\n    if n != 1:\n        l[n] += 1",
        "detail": "Largest_K",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Largest_K",
        "description": "Largest_K",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Largest_K",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Largest_K",
        "description": "Largest_K",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    print\n    pass\nif __name__ == \"__main__\":\n    print((range(1, 10, 2)))\n    for i in range(int(input())):",
        "detail": "Largest_K",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Largest_K",
        "description": "Largest_K",
        "peekOfCode": "def GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    print\n    pass\nif __name__ == \"__main__\":\n    print((range(1, 10, 2)))\n    for i in range(int(input())):\n        Solve()",
        "detail": "Largest_K",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Largest_K",
        "description": "Largest_K",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    print\n    pass\nif __name__ == \"__main__\":\n    print((range(1, 10, 2)))\n    for i in range(int(input())):\n        Solve()",
        "detail": "Largest_K",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Largest_K",
        "description": "Largest_K",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    print\n    pass\nif __name__ == \"__main__\":\n    print((range(1, 10, 2)))\n    for i in range(int(input())):\n        Solve()",
        "detail": "Largest_K",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Largest_K",
        "description": "Largest_K",
        "peekOfCode": "def Solve():\n    print\n    pass\nif __name__ == \"__main__\":\n    print((range(1, 10, 2)))\n    for i in range(int(input())):\n        Solve()",
        "detail": "Largest_K",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Largest_K",
        "description": "Largest_K",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Largest_K",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Let_Me_Eat_Cake",
        "description": "Let_Me_Eat_Cake",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    ans = 0\n    while l[0] != l[1]:\n        if l[0] > l[1]:\n            ans += ceil(l[0]/2)",
        "detail": "Let_Me_Eat_Cake",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Let_Me_Eat_Cake",
        "description": "Let_Me_Eat_Cake",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    ans = 0\n    while l[0] != l[1]:\n        if l[0] > l[1]:\n            ans += ceil(l[0]/2)\n            l[0] -= ceil(l[0]/2)",
        "detail": "Let_Me_Eat_Cake",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Let_Me_Eat_Cake",
        "description": "Let_Me_Eat_Cake",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    ans = 0\n    while l[0] != l[1]:\n        if l[0] > l[1]:\n            ans += ceil(l[0]/2)\n            l[0] -= ceil(l[0]/2)\n        else:",
        "detail": "Let_Me_Eat_Cake",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Let_Me_Eat_Cake",
        "description": "Let_Me_Eat_Cake",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    l = GL()\n    ans = 0\n    while l[0] != l[1]:\n        if l[0] > l[1]:\n            ans += ceil(l[0]/2)\n            l[0] -= ceil(l[0]/2)\n        else:\n            ans += ceil(l[1]/2)",
        "detail": "Let_Me_Eat_Cake",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Let_Me_Eat_Cake",
        "description": "Let_Me_Eat_Cake",
        "peekOfCode": "def Solve():\n    l = GL()\n    ans = 0\n    while l[0] != l[1]:\n        if l[0] > l[1]:\n            ans += ceil(l[0]/2)\n            l[0] -= ceil(l[0]/2)\n        else:\n            ans += ceil(l[1]/2)\n            l[1] -= ceil(l[1]/2)",
        "detail": "Let_Me_Eat_Cake",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Let_Me_Eat_Cake",
        "description": "Let_Me_Eat_Cake",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = GL()\n    ans = 0\n    while l[0] != l[1]:\n        if l[0] > l[1]:",
        "detail": "Let_Me_Eat_Cake",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "LongestCommonSuffix",
        "description": "LongestCommonSuffix",
        "peekOfCode": "class Solution:\n    def stringIndices(self, C: List[str], Q: List[str]) -> List[int]:\n        d = [{}, 0]\n        for ind, i in enumerate(C):\n            root = d\n            for j in i[::-1]+' ':\n                if j not in root[0]:\n                    root[0][j] = [{}, ind]\n                else:\n                    if len(C[root[1]]) > len(i):",
        "detail": "LongestCommonSuffix",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    i = n-2\n    while i >= 0 and l[i] <= l[n-1]//2:\n        i -= 1",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    i = n-2\n    while i >= 0 and l[i] <= l[n-1]//2:\n        i -= 1\n    print(i+2)",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    i = n-2\n    while i >= 0 and l[i] <= l[n-1]//2:\n        i -= 1\n    print(i+2)\n    pass",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    i = n-2\n    while i >= 0 and l[i] <= l[n-1]//2:\n        i -= 1\n    print(i+2)\n    pass\nif __name__ == \"__main__\":",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    i = n-2\n    while i >= 0 and l[i] <= l[n-1]//2:\n        i -= 1\n    print(i+2)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "def Solve():\n    n, l = II(), GL()\n    i = n-2\n    while i >= 0 and l[i] <= l[n-1]//2:\n        i -= 1\n    print(i+2)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Long_Queue",
        "description": "Long_Queue",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Long_Queue",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Magical_World",
        "description": "Magical_World",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c = M()\n    if a*b <= c*c:\n        return 0\n    elif a <= c*c or b <= c*c:\n        return 1",
        "detail": "Magical_World",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Magical_World",
        "description": "Magical_World",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c = M()\n    if a*b <= c*c:\n        return 0\n    elif a <= c*c or b <= c*c:\n        return 1\n    else:",
        "detail": "Magical_World",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Magical_World",
        "description": "Magical_World",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c = M()\n    if a*b <= c*c:\n        return 0\n    elif a <= c*c or b <= c*c:\n        return 1\n    else:\n        return 2",
        "detail": "Magical_World",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Magical_World",
        "description": "Magical_World",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b, c = M()\n    if a*b <= c*c:\n        return 0\n    elif a <= c*c or b <= c*c:\n        return 1\n    else:\n        return 2\n    pass",
        "detail": "Magical_World",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Magical_World",
        "description": "Magical_World",
        "peekOfCode": "def Solve():\n    a, b, c = M()\n    if a*b <= c*c:\n        return 0\n    elif a <= c*c or b <= c*c:\n        return 1\n    else:\n        return 2\n    pass\nif __name__ == \"__main__\":",
        "detail": "Magical_World",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Magical_World",
        "description": "Magical_World",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c = M()\n    if a*b <= c*c:\n        return 0\n    elif a <= c*c or b <= c*c:",
        "detail": "Magical_World",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def read_root():\n    return {\"message\": \"Hello World\"}\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000, reload=True)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "read_item",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000, reload=True)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello World\"}\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000, reload=True)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Make_Arithmetic_Progression",
        "description": "Make_Arithmetic_Progression",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    A, B, C = M()\n    print(0 if B-A == C-B else 1)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "Make_Arithmetic_Progression",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Make_Arithmetic_Progression",
        "description": "Make_Arithmetic_Progression",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    A, B, C = M()\n    print(0 if B-A == C-B else 1)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Make_Arithmetic_Progression",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Make_Arithmetic_Progression",
        "description": "Make_Arithmetic_Progression",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    A, B, C = M()\n    print(0 if B-A == C-B else 1)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Make_Arithmetic_Progression",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Make_Arithmetic_Progression",
        "description": "Make_Arithmetic_Progression",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    A, B, C = M()\n    print(0 if B-A == C-B else 1)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Make_Arithmetic_Progression",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Make_Arithmetic_Progression",
        "description": "Make_Arithmetic_Progression",
        "peekOfCode": "def Solve():\n    A, B, C = M()\n    print(0 if B-A == C-B else 1)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Make_Arithmetic_Progression",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Make_Arithmetic_Progression",
        "description": "Make_Arithmetic_Progression",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    A, B, C = M()\n    print(0 if B-A == C-B else 1)\n    pass",
        "detail": "Make_Arithmetic_Progression",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Make_Bob_Win",
        "description": "Make_Bob_Win",
        "peekOfCode": "def M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = II(), I()\n    i, z, o = 0, 0, 0\n    while i < len(s):\n        while i+1 < len(s) and s[i] == s[i+1]:\n            i += 1",
        "detail": "Make_Bob_Win",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Make_Bob_Win",
        "description": "Make_Bob_Win",
        "peekOfCode": "def GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = II(), I()\n    i, z, o = 0, 0, 0\n    while i < len(s):\n        while i+1 < len(s) and s[i] == s[i+1]:\n            i += 1\n        if s[i] == '0':",
        "detail": "Make_Bob_Win",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Make_Bob_Win",
        "description": "Make_Bob_Win",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = II(), I()\n    i, z, o = 0, 0, 0\n    while i < len(s):\n        while i+1 < len(s) and s[i] == s[i+1]:\n            i += 1\n        if s[i] == '0':\n            z += 1",
        "detail": "Make_Bob_Win",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Make_Bob_Win",
        "description": "Make_Bob_Win",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, s = II(), I()\n    i, z, o = 0, 0, 0\n    while i < len(s):\n        while i+1 < len(s) and s[i] == s[i+1]:\n            i += 1\n        if s[i] == '0':\n            z += 1\n        else:",
        "detail": "Make_Bob_Win",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Make_Bob_Win",
        "description": "Make_Bob_Win",
        "peekOfCode": "def Solve():\n    n, s = II(), I()\n    i, z, o = 0, 0, 0\n    while i < len(s):\n        while i+1 < len(s) and s[i] == s[i+1]:\n            i += 1\n        if s[i] == '0':\n            z += 1\n        else:\n            o += 1",
        "detail": "Make_Bob_Win",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Make_Bob_Win",
        "description": "Make_Bob_Win",
        "peekOfCode": "mod = 10**9+7\ndef M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, s = II(), I()\n    i, z, o = 0, 0, 0\n    while i < len(s):\n        while i+1 < len(s) and s[i] == s[i+1]:",
        "detail": "Make_Bob_Win",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Make_It_One",
        "description": "Make_It_One",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        a, b = list(map(int, input().split()))\n        # d = defaultdict(set)\n        # for i in range(a, b+1):\n        #     j, v = 2, i\n        #     while j*j <= i:\n        #         if i % j == 0:\n        #             d[j].add(v)\n        #         while i % j == 0:",
        "detail": "Make_It_One",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Make_My_Array_Equal",
        "description": "Make_My_Array_Equal",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n = I()\n    l = GL()\n    if len(set(l)) == 1:\n        print('YES')",
        "detail": "Make_My_Array_Equal",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Make_My_Array_Equal",
        "description": "Make_My_Array_Equal",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n = I()\n    l = GL()\n    if len(set(l)) == 1:\n        print('YES')\n    else:",
        "detail": "Make_My_Array_Equal",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Make_My_Array_Equal",
        "description": "Make_My_Array_Equal",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n = I()\n    l = GL()\n    if len(set(l)) == 1:\n        print('YES')\n    else:\n        l = [i for i in l if i != 0]",
        "detail": "Make_My_Array_Equal",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Make_My_Array_Equal",
        "description": "Make_My_Array_Equal",
        "peekOfCode": "def II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n = I()\n    l = GL()\n    if len(set(l)) == 1:\n        print('YES')\n    else:\n        l = [i for i in l if i != 0]\n        l.sort()",
        "detail": "Make_My_Array_Equal",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Make_My_Array_Equal",
        "description": "Make_My_Array_Equal",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n = I()\n    l = GL()\n    if len(set(l)) == 1:\n        print('YES')\n    else:\n        l = [i for i in l if i != 0]\n        l.sort()\n        g = l[0]",
        "detail": "Make_My_Array_Equal",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Make_My_Array_Equal",
        "description": "Make_My_Array_Equal",
        "peekOfCode": "def Solve():\n    n = I()\n    l = GL()\n    if len(set(l)) == 1:\n        print('YES')\n    else:\n        l = [i for i in l if i != 0]\n        l.sort()\n        g = l[0]\n        for i in l:",
        "detail": "Make_My_Array_Equal",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Make_My_Array_Equal",
        "description": "Make_My_Array_Equal",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Solve():\n    n = I()",
        "detail": "Make_My_Array_Equal",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Maximise_Sum",
        "description": "Maximise_Sum",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL()\n    s, posmn, neg, negmn = 0, float('inf'), 0, -float('inf')\n    negc = 0\n    zero = False\n    for i in l:",
        "detail": "Maximise_Sum",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Maximise_Sum",
        "description": "Maximise_Sum",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL()\n    s, posmn, neg, negmn = 0, float('inf'), 0, -float('inf')\n    negc = 0\n    zero = False\n    for i in l:\n        if i == 0:",
        "detail": "Maximise_Sum",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Maximise_Sum",
        "description": "Maximise_Sum",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL()\n    s, posmn, neg, negmn = 0, float('inf'), 0, -float('inf')\n    negc = 0\n    zero = False\n    for i in l:\n        if i == 0:\n            zero = True",
        "detail": "Maximise_Sum",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Maximise_Sum",
        "description": "Maximise_Sum",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, l = II(), GL()\n    s, posmn, neg, negmn = 0, float('inf'), 0, -float('inf')\n    negc = 0\n    zero = False\n    for i in l:\n        if i == 0:\n            zero = True\n        elif i > 0:",
        "detail": "Maximise_Sum",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Maximise_Sum",
        "description": "Maximise_Sum",
        "peekOfCode": "def Solve():\n    n, l = II(), GL()\n    s, posmn, neg, negmn = 0, float('inf'), 0, -float('inf')\n    negc = 0\n    zero = False\n    for i in l:\n        if i == 0:\n            zero = True\n        elif i > 0:\n            posmn = min(posmn, i)",
        "detail": "Maximise_Sum",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Maximise_Sum",
        "description": "Maximise_Sum",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL()\n    s, posmn, neg, negmn = 0, float('inf'), 0, -float('inf')\n    negc = 0\n    zero = False",
        "detail": "Maximise_Sum",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Maximum_Coins",
        "description": "Maximum_Coins",
        "peekOfCode": "def GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL(int)\n    ans = 0\n    for i in range(a, 0, -1):\n        ans += (1 << i)*(-1 if i <= a-b else 1)\n        # print(ans)\n    print(ans)",
        "detail": "Maximum_Coins",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Maximum_Coins",
        "description": "Maximum_Coins",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL(int)\n    ans = 0\n    for i in range(a, 0, -1):\n        ans += (1 << i)*(-1 if i <= a-b else 1)\n        # print(ans)\n    print(ans)\n    # pass",
        "detail": "Maximum_Coins",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Maximum_Coins",
        "description": "Maximum_Coins",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL(int)\n    ans = 0\n    for i in range(a, 0, -1):\n        ans += (1 << i)*(-1 if i <= a-b else 1)\n        # print(ans)\n    print(ans)\n    # pass\nif __name__ == \"__main__\":",
        "detail": "Maximum_Coins",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Maximum_Coins",
        "description": "Maximum_Coins",
        "peekOfCode": "def Solve():\n    a, b = GetL(int)\n    ans = 0\n    for i in range(a, 0, -1):\n        ans += (1 << i)*(-1 if i <= a-b else 1)\n        # print(ans)\n    print(ans)\n    # pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "Maximum_Coins",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Maximum_Coins",
        "description": "Maximum_Coins",
        "peekOfCode": "mod = 10**9+7\ndef GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b = GetL(int)\n    ans = 0\n    for i in range(a, 0, -1):\n        ans += (1 << i)*(-1 if i <= a-b else 1)\n        # print(ans)",
        "detail": "Maximum_Coins",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Maximum_Distance_Permutations",
        "description": "Maximum_Distance_Permutations",
        "peekOfCode": "t = int(input())\nwhile t:\n    n = int(input())\n    l = list(range(1, n+1))\n    print(*l)\n    print(*l[len(l)//2:], *l[:len(l)//2])\n    t -= 1",
        "detail": "Maximum_Distance_Permutations",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef f(l, s):\n    ans = s",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef f(l, s):\n    ans = s\n    for i in l:\n        s += i\n        ans = max(s, ans)",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef f(l, s):\n    ans = s\n    for i in l:\n        s += i\n        ans = max(s, ans)\n        s = max(s, 0)",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef f(l, s):\n    ans = s\n    for i in l:\n        s += i\n        ans = max(s, ans)\n        s = max(s, 0)\n    return ans",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef f(l, s):\n    ans = s\n    for i in l:\n        s += i\n        ans = max(s, ans)\n        s = max(s, 0)\n    return ans\ndef Solve():",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def p(*args): print(*args)\ndef f(l, s):\n    ans = s\n    for i in l:\n        s += i\n        ans = max(s, ans)\n        s = max(s, 0)\n    return ans\ndef Solve():\n    a = [II(), GL()]",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def f(l, s):\n    ans = s\n    for i in l:\n        s += i\n        ans = max(s, ans)\n        s = max(s, 0)\n    return ans\ndef Solve():\n    a = [II(), GL()]\n    b = [II(), GL()]",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "def Solve():\n    a = [II(), GL()]\n    b = [II(), GL()]\n    s = 0\n    for i in b[1]:\n        s += max(i, 0)\n    print(max(f(a[1], s), f(a[1][::-1], s)))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Maximum_Subarray",
        "description": "Maximum_Subarray",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Maximum_Subarray",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Max_Min_and_Length",
        "description": "Max_Min_and_Length",
        "peekOfCode": "def GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    l = sorted(GetL(int))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Max_Min_and_Length",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Max_Min_and_Length",
        "description": "Max_Min_and_Length",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    l = sorted(GetL(int))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Max_Min_and_Length",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Max_Min_and_Length",
        "description": "Max_Min_and_Length",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    l = sorted(GetL(int))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Max_Min_and_Length",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Max_Min_and_Length",
        "description": "Max_Min_and_Length",
        "peekOfCode": "def Solve():\n    n = GetI()\n    l = sorted(GetL(int))\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Max_Min_and_Length",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Max_Min_and_Length",
        "description": "Max_Min_and_Length",
        "peekOfCode": "mod = 10**9+7\ndef GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = GetI()\n    l = sorted(GetL(int))\n    pass\nif __name__ == \"__main__\":",
        "detail": "Max_Min_and_Length",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = input()",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = input()\n    l = GL()\n    mx = [-1, -1]\n    for i in l:",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = input()\n    l = GL()\n    mx = [-1, -1]\n    for i in l:\n        if i > mx[0]:",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = input()\n    l = GL()\n    mx = [-1, -1]\n    for i in l:\n        if i > mx[0]:\n            mx[1], mx[0] = mx[0], i",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n = input()\n    l = GL()\n    mx = [-1, -1]\n    for i in l:\n        if i > mx[0]:\n            mx[1], mx[0] = mx[0], i\n        elif i > mx[1] and mx[0] != i:",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    n = input()\n    l = GL()\n    mx = [-1, -1]\n    for i in l:\n        if i > mx[0]:\n            mx[1], mx[0] = mx[0], i\n        elif i > mx[1] and mx[0] != i:\n            mx[1] = i",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "def Solve():\n    n = input()\n    l = GL()\n    mx = [-1, -1]\n    for i in l:\n        if i > mx[0]:\n            mx[1], mx[0] = mx[0], i\n        elif i > mx[1] and mx[0] != i:\n            mx[1] = i\n    # print(mx)",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Max_Out",
        "description": "Max_Out",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Max_Out",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "MCM",
        "description": "MCM",
        "peekOfCode": "l = '''2\n2\n18 19\n3\n40 60 20\n'''.split('\\n')\nfor i in range(int(l.pop(0))):\n    n = int(l.pop(0))\n    mat = list(map(int, l.pop(0).split()))\n    @cache",
        "detail": "MCM",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\n@cache\ndef check(arr, rooms):",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def M(type): return (map(type, input().split()))\ndef GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\n@cache\ndef check(arr, rooms):\n    heap = [0]*rooms\n    for x, y in arr:\n        mn = heappop(heap)",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def GL(type): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\n@cache\ndef check(arr, rooms):\n    heap = [0]*rooms\n    for x, y in arr:\n        mn = heappop(heap)\n        if mn > x:",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\n@cache\ndef check(arr, rooms):\n    heap = [0]*rooms\n    for x, y in arr:\n        mn = heappop(heap)\n        if mn > x:\n            return False",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\n@cache\ndef check(arr, rooms):\n    heap = [0]*rooms\n    for x, y in arr:\n        mn = heappop(heap)\n        if mn > x:\n            return False\n        heappush(heap, y)",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def p(*args): print(*args)\n@cache\ndef check(arr, rooms):\n    heap = [0]*rooms\n    for x, y in arr:\n        mn = heappop(heap)\n        if mn > x:\n            return False\n        heappush(heap, y)\n        # print(heap)",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def check(arr, rooms):\n    heap = [0]*rooms\n    for x, y in arr:\n        mn = heappop(heap)\n        if mn > x:\n            return False\n        heappush(heap, y)\n        # print(heap)\n    return True\ndef Solve(arr):",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "def Solve(arr):\n    arr = tuple(tuple(i) for i in (sorted(arr, key=lambda x: x[0])))\n    print(arr)\n    l, r, ans = 1, len(arr), len(arr)\n    while l < r:\n        mid = (l+r)//2\n        print(mid, check(arr, mid))\n        if check(arr, mid):\n            ans = mid\n            r = mid",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Meetingrooms",
        "description": "Meetingrooms",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Meetingrooms",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Mighty_Friend",
        "description": "Mighty_Friend",
        "peekOfCode": "def GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n, k = GetL()\n    l, ans = [[], []], [0, 0]\n    for ind, i in enumerate(GetL()):\n        l[ind & 1].append(i)\n        ans[ind & 1] += i\n    l[0].sort(), l[1].sort()",
        "detail": "Mighty_Friend",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Mighty_Friend",
        "description": "Mighty_Friend",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n, k = GetL()\n    l, ans = [[], []], [0, 0]\n    for ind, i in enumerate(GetL()):\n        l[ind & 1].append(i)\n        ans[ind & 1] += i\n    l[0].sort(), l[1].sort()\n    print(l, ans)",
        "detail": "Mighty_Friend",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Mighty_Friend",
        "description": "Mighty_Friend",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    n, k = GetL()\n    l, ans = [[], []], [0, 0]\n    for ind, i in enumerate(GetL()):\n        l[ind & 1].append(i)\n        ans[ind & 1] += i\n    l[0].sort(), l[1].sort()\n    print(l, ans)\n    while l[0] and l[1] and l[0][-1] >= l[1][0] and k:",
        "detail": "Mighty_Friend",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Mighty_Friend",
        "description": "Mighty_Friend",
        "peekOfCode": "def Solve():\n    n, k = GetL()\n    l, ans = [[], []], [0, 0]\n    for ind, i in enumerate(GetL()):\n        l[ind & 1].append(i)\n        ans[ind & 1] += i\n    l[0].sort(), l[1].sort()\n    print(l, ans)\n    while l[0] and l[1] and l[0][-1] >= l[1][0] and k:\n        if l[0][-1] == l[1][0]:",
        "detail": "Mighty_Friend",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Mighty_Friend",
        "description": "Mighty_Friend",
        "peekOfCode": "mod = 10**9+7\ndef GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n, k = GetL()\n    l, ans = [[], []], [0, 0]\n    for ind, i in enumerate(GetL()):\n        l[ind & 1].append(i)\n        ans[ind & 1] += i",
        "detail": "Mighty_Friend",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Minimise_Inversions",
        "description": "Minimise_Inversions",
        "peekOfCode": "def GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef f(s):\n    i, o,  ans = 0, 0,  0\n    while i < len(s):\n        if s[i] == '1':\n            o += 1\n        elif s[i] == '0':\n            ans += o",
        "detail": "Minimise_Inversions",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Minimise_Inversions",
        "description": "Minimise_Inversions",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef f(s):\n    i, o,  ans = 0, 0,  0\n    while i < len(s):\n        if s[i] == '1':\n            o += 1\n        elif s[i] == '0':\n            ans += o\n        i += 1",
        "detail": "Minimise_Inversions",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Minimise_Inversions",
        "description": "Minimise_Inversions",
        "peekOfCode": "def GetI(): return int(GetS())\ndef f(s):\n    i, o,  ans = 0, 0,  0\n    while i < len(s):\n        if s[i] == '1':\n            o += 1\n        elif s[i] == '0':\n            ans += o\n        i += 1\n    print(''.join(s), ans)",
        "detail": "Minimise_Inversions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Minimise_Inversions",
        "description": "Minimise_Inversions",
        "peekOfCode": "def f(s):\n    i, o,  ans = 0, 0,  0\n    while i < len(s):\n        if s[i] == '1':\n            o += 1\n        elif s[i] == '0':\n            ans += o\n        i += 1\n    print(''.join(s), ans)\n    return ans",
        "detail": "Minimise_Inversions",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Minimise_Inversions",
        "description": "Minimise_Inversions",
        "peekOfCode": "def Solve():\n    a, b = GetL(int)\n    s = list(GetS())\n    @cache\n    def f(ind=0, c=0, k=b):\n        print(locals())\n        if ind == len(s):\n            return 0\n        if s[ind] == '0':\n            v = min(f(ind+1, c, b)+c, (f(ind+1, c+1, b-1) if b else float('inf')))",
        "detail": "Minimise_Inversions",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Minimise_Inversions",
        "description": "Minimise_Inversions",
        "peekOfCode": "mod = 10**9+7\ndef GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef f(s):\n    i, o,  ans = 0, 0,  0\n    while i < len(s):\n        if s[i] == '1':\n            o += 1\n        elif s[i] == '0':",
        "detail": "Minimise_Inversions",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Min_Ops_Easy",
        "description": "Min_Ops_Easy",
        "peekOfCode": "def M(type=int): return (map(type ,input().split()))\ndef GL(rtype=list,type=int): return rtype(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Min_Ops_Easy",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Min_Ops_Easy",
        "description": "Min_Ops_Easy",
        "peekOfCode": "def GL(rtype=list,type=int): return rtype(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Min_Ops_Easy",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Min_Ops_Easy",
        "description": "Min_Ops_Easy",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Min_Ops_Easy",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Min_Ops_Easy",
        "description": "Min_Ops_Easy",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Min_Ops_Easy",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Min_Ops_Easy",
        "description": "Min_Ops_Easy",
        "peekOfCode": "def Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Min_Ops_Easy",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Min_Ops_Easy",
        "description": "Min_Ops_Easy",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type ,input().split()))\ndef GL(rtype=list,type=int): return rtype(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Min_Ops_Easy",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Non_Divisor_Array",
        "description": "Non_Divisor_Array",
        "peekOfCode": "def GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        if n == 1:",
        "detail": "Non_Divisor_Array",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Non_Divisor_Array",
        "description": "Non_Divisor_Array",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        if n == 1:\n            break",
        "detail": "Non_Divisor_Array",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Non_Divisor_Array",
        "description": "Non_Divisor_Array",
        "peekOfCode": "def GetI(): return int(GetS())\ndef primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        if n == 1:\n            break\n    if n != 1:",
        "detail": "Non_Divisor_Array",
        "documentation": {}
    },
    {
        "label": "primeFactors",
        "kind": 2,
        "importPath": "Non_Divisor_Array",
        "description": "Non_Divisor_Array",
        "peekOfCode": "def primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        if n == 1:\n            break\n    if n != 1:\n        l[n] += 1",
        "detail": "Non_Divisor_Array",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Non_Divisor_Array",
        "description": "Non_Divisor_Array",
        "peekOfCode": "def Solve():\n    n = GetI()\n    l = [0 for i in range(n+1)]\n    for i in range(1, n+1):\n        l[i] = primeFactors(i)\n    l.pop(0)\n    # print(max(l))\n    print(*l)\n    pass\nif __name__ == \"__main__\":",
        "detail": "Non_Divisor_Array",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Non_Divisor_Array",
        "description": "Non_Divisor_Array",
        "peekOfCode": "mod = 10**9+7\ndef GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i",
        "detail": "Non_Divisor_Array",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Non_Primes_101",
        "description": "Non_Primes_101",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)",
        "detail": "Non_Primes_101",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Non_Primes_101",
        "description": "Non_Primes_101",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):",
        "detail": "Non_Primes_101",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Non_Primes_101",
        "description": "Non_Primes_101",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Non_Primes_101",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Non_Primes_101",
        "description": "Non_Primes_101",
        "peekOfCode": "def II(): return int(I())\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Non_Primes_101",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Non_Primes_101",
        "description": "Non_Primes_101",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    prime[0] = prime[1] = False",
        "detail": "Non_Primes_101",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Non_Primes_101",
        "description": "Non_Primes_101",
        "peekOfCode": "def Solve():\n    n, l = II(), GL()\n    p, np, tc, o = [], [], [], []\n    for ind, i in enumerate(l):\n        if i == 1:\n            o.append(ind+1)\n        elif i == 2:\n            tc.append(ind+1)\n        elif prime[i]:\n            p.append(ind+1)",
        "detail": "Non_Primes_101",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Non_Primes_101",
        "description": "Non_Primes_101",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:",
        "detail": "Non_Primes_101",
        "documentation": {}
    },
    {
        "label": "prime",
        "kind": 5,
        "importPath": "Non_Primes_101",
        "description": "Non_Primes_101",
        "peekOfCode": "prime = Seieve(10**5*2+1)\ndef Solve():\n    n, l = II(), GL()\n    p, np, tc, o = [], [], [], []\n    for ind, i in enumerate(l):\n        if i == 1:\n            o.append(ind+1)\n        elif i == 2:\n            tc.append(ind+1)\n        elif prime[i]:",
        "detail": "Non_Primes_101",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Not_Prime_Permutation",
        "description": "Not_Prime_Permutation",
        "peekOfCode": "def GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n, l = GetI(), list(GetL())\n    if n <= 2:\n        print(-1)\n    else:\n        d = {}\n        if n & 1 == 0:",
        "detail": "Not_Prime_Permutation",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Not_Prime_Permutation",
        "description": "Not_Prime_Permutation",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n, l = GetI(), list(GetL())\n    if n <= 2:\n        print(-1)\n    else:\n        d = {}\n        if n & 1 == 0:\n            d[n] = n",
        "detail": "Not_Prime_Permutation",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Not_Prime_Permutation",
        "description": "Not_Prime_Permutation",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    n, l = GetI(), list(GetL())\n    if n <= 2:\n        print(-1)\n    else:\n        d = {}\n        if n & 1 == 0:\n            d[n] = n\n            n -= 1",
        "detail": "Not_Prime_Permutation",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Not_Prime_Permutation",
        "description": "Not_Prime_Permutation",
        "peekOfCode": "def Solve():\n    n, l = GetI(), list(GetL())\n    if n <= 2:\n        print(-1)\n    else:\n        d = {}\n        if n & 1 == 0:\n            d[n] = n\n            n -= 1\n        for i in range(1, n+1):",
        "detail": "Not_Prime_Permutation",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Not_Prime_Permutation",
        "description": "Not_Prime_Permutation",
        "peekOfCode": "mod = 10**9+7\ndef GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n, l = GetI(), list(GetL())\n    if n <= 2:\n        print(-1)\n    else:\n        d = {}",
        "detail": "Not_Prime_Permutation",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    heap = []\n    s = 0\n    for i in range(n):",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    heap = []\n    s = 0\n    for i in range(n):\n        if l[-1] < l[i]:",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    heap = []\n    s = 0\n    for i in range(n):\n        if l[-1] < l[i]:\n            heappush(heap, (l[i], i))",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    heap = []\n    s = 0\n    for i in range(n):\n        if l[-1] < l[i]:\n            heappush(heap, (l[i], i))\n        else:",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    heap = []\n    s = 0\n    for i in range(n):\n        if l[-1] < l[i]:\n            heappush(heap, (l[i], i))\n        else:\n            s += l[i]",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "def Solve():\n    n, l = II(), GL()\n    heap = []\n    s = 0\n    for i in range(n):\n        if l[-1] < l[i]:\n            heappush(heap, (l[i], i))\n        else:\n            s += l[i]\n    while heap and heap[0][0] <= l[-1]*2:",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Not_too_far_Replacement",
        "description": "Not_too_far_Replacement",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Not_too_far_Replacement",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "No_Winner",
        "description": "No_Winner",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c, d = M()\n    if len(set([a, b, c])) <= 2:\n        print('YES')\n    else:\n        print('YES' if abs(a-b) <= d or abs(b-c)",
        "detail": "No_Winner",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "No_Winner",
        "description": "No_Winner",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c, d = M()\n    if len(set([a, b, c])) <= 2:\n        print('YES')\n    else:\n        print('YES' if abs(a-b) <= d or abs(b-c)\n              <= d or abs(c-a) <= d else 'NO')",
        "detail": "No_Winner",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "No_Winner",
        "description": "No_Winner",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c, d = M()\n    if len(set([a, b, c])) <= 2:\n        print('YES')\n    else:\n        print('YES' if abs(a-b) <= d or abs(b-c)\n              <= d or abs(c-a) <= d else 'NO')\n    pass",
        "detail": "No_Winner",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "No_Winner",
        "description": "No_Winner",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b, c, d = M()\n    if len(set([a, b, c])) <= 2:\n        print('YES')\n    else:\n        print('YES' if abs(a-b) <= d or abs(b-c)\n              <= d or abs(c-a) <= d else 'NO')\n    pass\nif __name__ == \"__main__\":",
        "detail": "No_Winner",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "No_Winner",
        "description": "No_Winner",
        "peekOfCode": "def Solve():\n    a, b, c, d = M()\n    if len(set([a, b, c])) <= 2:\n        print('YES')\n    else:\n        print('YES' if abs(a-b) <= d or abs(b-c)\n              <= d or abs(c-a) <= d else 'NO')\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "No_Winner",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "No_Winner",
        "description": "No_Winner",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, c, d = M()\n    if len(set([a, b, c])) <= 2:\n        print('YES')\n    else:",
        "detail": "No_Winner",
        "documentation": {}
    },
    {
        "label": "is_prime",
        "kind": 2,
        "importPath": "Number_Hunt",
        "description": "Number_Hunt",
        "peekOfCode": "def is_prime(num):\n    \"\"\"Check if a number is prime using a list of small primes.\"\"\"\n    if num <= 1:\n        return False\n    prime = 2\n    while prime*prime <= num:\n        if num % prime == 0:\n            return False\n        prime += 1\n    return True",
        "detail": "Number_Hunt",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Odd_Sum",
        "description": "Odd_Sum",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n = (int(input())-2)\n        print(1+(n*(n+1)))\nif __name__ == \"__main__\":\n    main()\n# 1 3 5 2 0\n# 1\n# 1 0\n# 1 2 0",
        "detail": "Odd_Sum",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    (n, k), l = GL(), GL(rtype=sorted)",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    (n, k), l = GL(), GL(rtype=sorted)\n    # print(l, *[i for i in range(2, 10)])\n    if k == 1:\n        print(l[-1]*2+l[-2]+l[0])",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    (n, k), l = GL(), GL(rtype=sorted)\n    # print(l, *[i for i in range(2, 10)])\n    if k == 1:\n        print(l[-1]*2+l[-2]+l[0])\n    elif n == 2:",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    (n, k), l = GL(), GL(rtype=sorted)\n    # print(l, *[i for i in range(2, 10)])\n    if k == 1:\n        print(l[-1]*2+l[-2]+l[0])\n    elif n == 2:\n        print(l[0]*2+l[1]*2)",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    (n, k), l = GL(), GL(rtype=sorted)\n    # print(l, *[i for i in range(2, 10)])\n    if k == 1:\n        print(l[-1]*2+l[-2]+l[0])\n    elif n == 2:\n        print(l[0]*2+l[1]*2)\n    else:",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    (n, k), l = GL(), GL(rtype=sorted)\n    # print(l, *[i for i in range(2, 10)])\n    if k == 1:\n        print(l[-1]*2+l[-2]+l[0])\n    elif n == 2:\n        print(l[0]*2+l[1]*2)\n    else:\n        print(l[-1]+l[-2]+l[0] + l[-k-1])",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "def Solve():\n    (n, k), l = GL(), GL(rtype=sorted)\n    # print(l, *[i for i in range(2, 10)])\n    if k == 1:\n        print(l[-1]*2+l[-2]+l[0])\n    elif n == 2:\n        print(l[0]*2+l[1]*2)\n    else:\n        print(l[-1]+l[-2]+l[0] + l[-k-1])\n    pass",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Partition_Score",
        "description": "Partition_Score",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Partition_Score",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Permutation_Construction",
        "description": "Permutation_Construction",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(1, 2)",
        "detail": "Permutation_Construction",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Permutation_Construction",
        "description": "Permutation_Construction",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(1, 2)\n    elif n == 3:",
        "detail": "Permutation_Construction",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Permutation_Construction",
        "description": "Permutation_Construction",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(1, 2)\n    elif n == 3:\n        print(1, 3, 2)",
        "detail": "Permutation_Construction",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Permutation_Construction",
        "description": "Permutation_Construction",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n = II()\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(1, 2)\n    elif n == 3:\n        print(1, 3, 2)\n    elif n == 4:",
        "detail": "Permutation_Construction",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Permutation_Construction",
        "description": "Permutation_Construction",
        "peekOfCode": "def Solve():\n    n = II()\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(1, 2)\n    elif n == 3:\n        print(1, 3, 2)\n    elif n == 4:\n        print(1, 4, 2, 3)",
        "detail": "Permutation_Construction",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Permutation_Construction",
        "description": "Permutation_Construction",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n = II()\n    if n == 1:\n        print(1)\n    elif n == 2:",
        "detail": "Permutation_Construction",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Prefix_Suffix_Min_Max",
        "description": "Prefix_Suffix_Min_Max",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef primeFactors(n):\n    l, i = Counter(), 2\n    while i*i <= n:\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i",
        "detail": "Prefix_Suffix_Min_Max",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Prefix_Suffix_Min_Max",
        "description": "Prefix_Suffix_Min_Max",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef primeFactors(n):\n    l, i = Counter(), 2\n    while i*i <= n:\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        i += 1",
        "detail": "Prefix_Suffix_Min_Max",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Prefix_Suffix_Min_Max",
        "description": "Prefix_Suffix_Min_Max",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef primeFactors(n):\n    l, i = Counter(), 2\n    while i*i <= n:\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        i += 1\n    if n != 1:",
        "detail": "Prefix_Suffix_Min_Max",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Prefix_Suffix_Min_Max",
        "description": "Prefix_Suffix_Min_Max",
        "peekOfCode": "def II(): return int(I())\ndef primeFactors(n):\n    l, i = Counter(), 2\n    while i*i <= n:\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        i += 1\n    if n != 1:\n        l[n] += 1",
        "detail": "Prefix_Suffix_Min_Max",
        "documentation": {}
    },
    {
        "label": "primeFactors",
        "kind": 2,
        "importPath": "Prefix_Suffix_Min_Max",
        "description": "Prefix_Suffix_Min_Max",
        "peekOfCode": "def primeFactors(n):\n    l, i = Counter(), 2\n    while i*i <= n:\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        i += 1\n    if n != 1:\n        l[n] += 1\n    return l",
        "detail": "Prefix_Suffix_Min_Max",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Prefix_Suffix_Min_Max",
        "description": "Prefix_Suffix_Min_Max",
        "peekOfCode": "def Solve():\n    print(primeFactors(684/9))\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Prefix_Suffix_Min_Max",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Prefix_Suffix_Min_Max",
        "description": "Prefix_Suffix_Min_Max",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef primeFactors(n):\n    l, i = Counter(), 2\n    while i*i <= n:\n        while n != 1 and n % i == 0:\n            l[i] += 1",
        "detail": "Prefix_Suffix_Min_Max",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Punched Cards",
        "description": "Punched Cards",
        "peekOfCode": "t = int(input())\nfor t in range(1, t+1):\n    print(f\"Case #{t}:\")\n    a,b=map(int,input().split())\n    for i in range(2*a+1):\n        s=''\n        if i==0 or i==1:\n            s+='..'\n        s+=('+-' if i%2==0 else '|.')*(b-len(s)//2)+('+' if i%2==0 else '|')\n        print(s)",
        "detail": "Punched Cards",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Ratio_By_2",
        "description": "Ratio_By_2",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = sorted(M())\n    if l[1] >= l[0]*2:\n        ans = 0\n    elif l[1] & 1 == 0:\n        ans = (abs(l[1]//2-l[0]))",
        "detail": "Ratio_By_2",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Ratio_By_2",
        "description": "Ratio_By_2",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = sorted(M())\n    if l[1] >= l[0]*2:\n        ans = 0\n    elif l[1] & 1 == 0:\n        ans = (abs(l[1]//2-l[0]))\n    else:",
        "detail": "Ratio_By_2",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Ratio_By_2",
        "description": "Ratio_By_2",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = sorted(M())\n    if l[1] >= l[0]*2:\n        ans = 0\n    elif l[1] & 1 == 0:\n        ans = (abs(l[1]//2-l[0]))\n    else:\n        ans = 1+min(abs(l[1]//2-l[0]), abs((l[1]+1)//2-l[0]))",
        "detail": "Ratio_By_2",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Ratio_By_2",
        "description": "Ratio_By_2",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    l = sorted(M())\n    if l[1] >= l[0]*2:\n        ans = 0\n    elif l[1] & 1 == 0:\n        ans = (abs(l[1]//2-l[0]))\n    else:\n        ans = 1+min(abs(l[1]//2-l[0]), abs((l[1]+1)//2-l[0]))\n    print(ans)",
        "detail": "Ratio_By_2",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Ratio_By_2",
        "description": "Ratio_By_2",
        "peekOfCode": "def Solve():\n    l = sorted(M())\n    if l[1] >= l[0]*2:\n        ans = 0\n    elif l[1] & 1 == 0:\n        ans = (abs(l[1]//2-l[0]))\n    else:\n        ans = 1+min(abs(l[1]//2-l[0]), abs((l[1]+1)//2-l[0]))\n    print(ans)\nif __name__ == \"__main__\":",
        "detail": "Ratio_By_2",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Ratio_By_2",
        "description": "Ratio_By_2",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    l = sorted(M())\n    if l[1] >= l[0]*2:\n        ans = 0\n    elif l[1] & 1 == 0:",
        "detail": "Ratio_By_2",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Replace_With_First",
        "description": "Replace_With_First",
        "peekOfCode": "def M(type=int): return (map(type ,input().split()))\ndef GL(rtype=list,type=int): return rtype(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Replace_With_First",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Replace_With_First",
        "description": "Replace_With_First",
        "peekOfCode": "def GL(rtype=list,type=int): return rtype(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Replace_With_First",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Replace_With_First",
        "description": "Replace_With_First",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Replace_With_First",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Replace_With_First",
        "description": "Replace_With_First",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Replace_With_First",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Replace_With_First",
        "description": "Replace_With_First",
        "peekOfCode": "def Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Replace_With_First",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Replace_With_First",
        "description": "Replace_With_First",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type ,input().split()))\ndef GL(rtype=list,type=int): return rtype(map(type ,input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Replace_With_First",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Replacing_Game",
        "description": "Replacing_Game",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = GL()\n    s1, s2 = list(I()), list(I())\n    def f(s1, s2):\n        changed, l = [], 0\n        ans = []",
        "detail": "Replacing_Game",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Replacing_Game",
        "description": "Replacing_Game",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = GL()\n    s1, s2 = list(I()), list(I())\n    def f(s1, s2):\n        changed, l = [], 0\n        ans = []\n        for i in range(a-b+1):",
        "detail": "Replacing_Game",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Replacing_Game",
        "description": "Replacing_Game",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = GL()\n    s1, s2 = list(I()), list(I())\n    def f(s1, s2):\n        changed, l = [], 0\n        ans = []\n        for i in range(a-b+1):\n            if (changed and changed[-1][0] != s2[i]) or (not changed and s1[i] != s2[i]):",
        "detail": "Replacing_Game",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Replacing_Game",
        "description": "Replacing_Game",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b = GL()\n    s1, s2 = list(I()), list(I())\n    def f(s1, s2):\n        changed, l = [], 0\n        ans = []\n        for i in range(a-b+1):\n            if (changed and changed[-1][0] != s2[i]) or (not changed and s1[i] != s2[i]):\n                # if changed:",
        "detail": "Replacing_Game",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Replacing_Game",
        "description": "Replacing_Game",
        "peekOfCode": "def Solve():\n    a, b = GL()\n    s1, s2 = list(I()), list(I())\n    def f(s1, s2):\n        changed, l = [], 0\n        ans = []\n        for i in range(a-b+1):\n            if (changed and changed[-1][0] != s2[i]) or (not changed and s1[i] != s2[i]):\n                # if changed:\n                #     print(changed[-1][0], s2[i], changed[-1][0] != s2[i])",
        "detail": "Replacing_Game",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Replacing_Game",
        "description": "Replacing_Game",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = GL()\n    s1, s2 = list(I()), list(I())",
        "detail": "Replacing_Game",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "requestApi",
        "description": "requestApi",
        "peekOfCode": "r = requests.get(f'https://irctc1.p.rapidapi.com/api/v3/trainBetweenStations?fromStationCode={start}&toStationCode={dest}&dateOfJourney={date}',\n                 headers={\n                     \"x-rapidapi-host\": \"irctc1.p.rapidapi.com\",\n                     'x-rapidapi-key': 'b60f8ca0damsh5c95a972939f48ep16c52ejsn72c4c71fed99'})\nprint(r.content\n      )",
        "detail": "requestApi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Sale",
        "description": "Sale",
        "peekOfCode": "def main():\nif __name__ == \"__main__\":\n    main()",
        "detail": "Sale",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Savings_Account",
        "description": "Savings_Account",
        "peekOfCode": "def GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b, c = GetL(int)\n    ans = 0\n    for i in range(1, a+1):\n        if b*i <= c:\n            ans = i\n        else:",
        "detail": "Savings_Account",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Savings_Account",
        "description": "Savings_Account",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b, c = GetL(int)\n    ans = 0\n    for i in range(1, a+1):\n        if b*i <= c:\n            ans = i\n        else:\n            break",
        "detail": "Savings_Account",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Savings_Account",
        "description": "Savings_Account",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    a, b, c = GetL(int)\n    ans = 0\n    for i in range(1, a+1):\n        if b*i <= c:\n            ans = i\n        else:\n            break\n    print(a-ans)",
        "detail": "Savings_Account",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Savings_Account",
        "description": "Savings_Account",
        "peekOfCode": "def Solve():\n    a, b, c = GetL(int)\n    ans = 0\n    for i in range(1, a+1):\n        if b*i <= c:\n            ans = i\n        else:\n            break\n    print(a-ans)\n    pass",
        "detail": "Savings_Account",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Savings_Account",
        "description": "Savings_Account",
        "peekOfCode": "mod = 10**9+7\ndef GetL(type): return map(type, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    a, b, c = GetL(int)\n    ans = 0\n    for i in range(1, a+1):\n        if b*i <= c:\n            ans = i",
        "detail": "Savings_Account",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Sequence_Search",
        "description": "Sequence_Search",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, k = M()\n    s = [0, a, b]\n    for i in range(4, k+1):\n        s.append(s[-1]+s[-2]-s[-3])\n    # print(s)",
        "detail": "Sequence_Search",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Sequence_Search",
        "description": "Sequence_Search",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, k = M()\n    s = [0, a, b]\n    for i in range(4, k+1):\n        s.append(s[-1]+s[-2]-s[-3])\n    # print(s)\n    if k == 1:",
        "detail": "Sequence_Search",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Sequence_Search",
        "description": "Sequence_Search",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, k = M()\n    s = [0, a, b]\n    for i in range(4, k+1):\n        s.append(s[-1]+s[-2]-s[-3])\n    # print(s)\n    if k == 1:\n        print(0)",
        "detail": "Sequence_Search",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Sequence_Search",
        "description": "Sequence_Search",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b, k = M()\n    s = [0, a, b]\n    for i in range(4, k+1):\n        s.append(s[-1]+s[-2]-s[-3])\n    # print(s)\n    if k == 1:\n        print(0)\n    elif a < b:",
        "detail": "Sequence_Search",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Sequence_Search",
        "description": "Sequence_Search",
        "peekOfCode": "def Solve():\n    a, b, k = M()\n    s = [0, a, b]\n    for i in range(4, k+1):\n        s.append(s[-1]+s[-2]-s[-3])\n    # print(s)\n    if k == 1:\n        print(0)\n    elif a < b:\n        print(b+max(k-2, 0)//2*b if k % 2 == 1 else a+max(k-2, 0)//2*b)",
        "detail": "Sequence_Search",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Sequence_Search",
        "description": "Sequence_Search",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b, k = M()\n    s = [0, a, b]\n    for i in range(4, k+1):\n        s.append(s[-1]+s[-2]-s[-3])",
        "detail": "Sequence_Search",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Shooting_Easy",
        "description": "Shooting_Easy",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    lis = GL()\n    sufa, sufb = [0, 0], [0, 0]\n    for ind, i in enumerate(lis):\n        ind += 1",
        "detail": "Shooting_Easy",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Shooting_Easy",
        "description": "Shooting_Easy",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    lis = GL()\n    sufa, sufb = [0, 0], [0, 0]\n    for ind, i in enumerate(lis):\n        ind += 1\n        if i == 1:",
        "detail": "Shooting_Easy",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Shooting_Easy",
        "description": "Shooting_Easy",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    lis = GL()\n    sufa, sufb = [0, 0], [0, 0]\n    for ind, i in enumerate(lis):\n        ind += 1\n        if i == 1:\n            sufa[0] += ind",
        "detail": "Shooting_Easy",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Shooting_Easy",
        "description": "Shooting_Easy",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b = M()\n    lis = GL()\n    sufa, sufb = [0, 0], [0, 0]\n    for ind, i in enumerate(lis):\n        ind += 1\n        if i == 1:\n            sufa[0] += ind\n            sufa[1] += 1",
        "detail": "Shooting_Easy",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Shooting_Easy",
        "description": "Shooting_Easy",
        "peekOfCode": "def Solve():\n    a, b = M()\n    lis = GL()\n    sufa, sufb = [0, 0], [0, 0]\n    for ind, i in enumerate(lis):\n        ind += 1\n        if i == 1:\n            sufa[0] += ind\n            sufa[1] += 1\n        elif i == 2:",
        "detail": "Shooting_Easy",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Shooting_Easy",
        "description": "Shooting_Easy",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    lis = GL()\n    sufa, sufb = [0, 0], [0, 0]\n    for ind, i in enumerate(lis):",
        "detail": "Shooting_Easy",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, s = II(), I()",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, s = II(), I()\n    o = s.count('1')\n    if o == 0:\n        print(n)",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, s = II(), I()\n    o = s.count('1')\n    if o == 0:\n        print(n)\n    else:",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, s = II(), I()\n    o = s.count('1')\n    if o == 0:\n        print(n)\n    else:\n        print(1 if o & 1 else 0)",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, s = II(), I()\n    o = s.count('1')\n    if o == 0:\n        print(n)\n    else:\n        print(1 if o & 1 else 0)\nif __name__ == \"__main__\":",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    n, s = II(), I()\n    o = s.count('1')\n    if o == 0:\n        print(n)\n    else:\n        print(1 if o & 1 else 0)\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "def Solve():\n    n, s = II(), I()\n    o = s.count('1')\n    if o == 0:\n        print(n)\n    else:\n        print(1 if o & 1 else 0)\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Small_Smaller_Smallest",
        "description": "Small_Smaller_Smallest",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Small_Smaller_Smallest",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\ndef primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "primeFactors",
        "kind": 2,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "def primeFactors(n):\n    l = Counter()\n    for i in range(2, int(sqrt(n)) + 1):\n        while n != 1 and n % i == 0:\n            l[i] += 1\n            n //= i\n        if n == 1:\n            return l\n    if n != 1:\n        l[n] += 1",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = int(input())\n    l, stack, f = GetS(), [], False\n    for i in l:\n        if not f and stack and stack[-1] > i:\n            f = True",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "def GetL(): return map(int, input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = int(input())\n    l, stack, f = GetS(), [], False\n    for i in l:\n        if not f and stack and stack[-1] > i:\n            f = True\n            stack.pop()",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    n = int(input())\n    l, stack, f = GetS(), [], False\n    for i in l:\n        if not f and stack and stack[-1] > i:\n            f = True\n            stack.pop()\n        stack.append(i)",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    n = int(input())\n    l, stack, f = GetS(), [], False\n    for i in l:\n        if not f and stack and stack[-1] > i:\n            f = True\n            stack.pop()\n        stack.append(i)\n    if not f:",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "def Solve():\n    n = int(input())\n    l, stack, f = GetS(), [], False\n    for i in l:\n        if not f and stack and stack[-1] > i:\n            f = True\n            stack.pop()\n        stack.append(i)\n    if not f:\n        stack.pop()",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Spell_Shortening",
        "description": "Spell_Shortening",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Spell_Shortening",
        "documentation": {}
    },
    {
        "label": "GetL",
        "kind": 2,
        "importPath": "Split_And_Maximize",
        "description": "Split_And_Maximize",
        "peekOfCode": "def GetL(): return map(int ,input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Split_And_Maximize",
        "documentation": {}
    },
    {
        "label": "GetS",
        "kind": 2,
        "importPath": "Split_And_Maximize",
        "description": "Split_And_Maximize",
        "peekOfCode": "def GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Split_And_Maximize",
        "documentation": {}
    },
    {
        "label": "GetI",
        "kind": 2,
        "importPath": "Split_And_Maximize",
        "description": "Split_And_Maximize",
        "peekOfCode": "def GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Split_And_Maximize",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Split_And_Maximize",
        "description": "Split_And_Maximize",
        "peekOfCode": "def Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Split_And_Maximize",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Split_And_Maximize",
        "description": "Split_And_Maximize",
        "peekOfCode": "mod = 10**9+7\ndef GetL(): return map(int ,input().split())\ndef GetS(): return input()\ndef GetI(): return int(GetS())\ndef Solve():\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Split_And_Maximize",
        "documentation": {}
    },
    {
        "label": "primes",
        "kind": 5,
        "importPath": "Sum_of_N",
        "description": "Sum_of_N",
        "peekOfCode": "primes = [False]*(10**6+1)\ni = 2\nwhile i*i <= len(primes):\n    # print(i)\n    if not primes[i]:\n        for j in range(i*i, len(primes), i):\n            primes[j] = True\n    i += 1\nprimes = [i for i in range(2, len(primes)) if not primes[i]]\n# print(primes)",
        "detail": "Sum_of_N",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "Sum_of_N",
        "description": "Sum_of_N",
        "peekOfCode": "i = 2\nwhile i*i <= len(primes):\n    # print(i)\n    if not primes[i]:\n        for j in range(i*i, len(primes), i):\n            primes[j] = True\n    i += 1\nprimes = [i for i in range(2, len(primes)) if not primes[i]]\n# print(primes)\nfor i in [10020, 12323, 1234, 122308, 123]:",
        "detail": "Sum_of_N",
        "documentation": {}
    },
    {
        "label": "primes",
        "kind": 5,
        "importPath": "Sum_of_N",
        "description": "Sum_of_N",
        "peekOfCode": "primes = [i for i in range(2, len(primes)) if not primes[i]]\n# print(primes)\nfor i in [10020, 12323, 1234, 122308, 123]:\n    v = n = i\n    isprime = False\n    if v in primes:\n        isprime = True\n    fact, j = [], 0\n    while primes[j]*primes[j] <= v:\n        if v % primes[j] == 0:",
        "detail": "Sum_of_N",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Superincreasing",
        "description": "Superincreasing",
        "peekOfCode": "def f(n):\n    global l, fib, s\n    for i in range(l, n+1):\n        fib[i] = (s+1)\n        s += fib[i]\n        l += 1\n    print(fib[:n+1])\n    return fib[n-1]\nl, fib, s = 1, [1]+[0]*10**5, 1\nfor t in range(int(input())):",
        "detail": "Superincreasing",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a, b, c = M()",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a, b, c = M()\n    s, days = 0, 1\n    count = 0\n    while c > 0 and days % 7 != 0:",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a, b, c = M()\n    s, days = 0, 1\n    count = 0\n    while c > 0 and days % 7 != 0:\n        c -= ((a+s)//b)",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a, b, c = M()\n    s, days = 0, 1\n    count = 0\n    while c > 0 and days % 7 != 0:\n        c -= ((a+s)//b)\n        days = (days+(a+s)//b)",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    a, b, c = M()\n    s, days = 0, 1\n    count = 0\n    while c > 0 and days % 7 != 0:\n        c -= ((a+s)//b)\n        days = (days+(a+s)//b)\n        s = (a+s) % b",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    a, b, c = M()\n    s, days = 0, 1\n    count = 0\n    while c > 0 and days % 7 != 0:\n        c -= ((a+s)//b)\n        days = (days+(a+s)//b)\n        s = (a+s) % b\n        print(c, days % 7, s)",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "def Solve():\n    a, b, c = M()\n    s, days = 0, 1\n    count = 0\n    while c > 0 and days % 7 != 0:\n        c -= ((a+s)//b)\n        days = (days+(a+s)//b)\n        s = (a+s) % b\n        print(c, days % 7, s)\n        count += 1",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Survive_in_ChocoLand",
        "description": "Survive_in_ChocoLand",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Survive_in_ChocoLand",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Swap_and_Unite",
        "description": "Swap_and_Unite",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        s = input()\n        d = Counter(s)\n        ans = float('inf')\n        for i in d:\n            c, l = 0, 0\n            for ind, j in enumerate(s):\n                if j == i:\n                    c += 1",
        "detail": "Swap_and_Unite",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Table_Strength",
        "description": "Table_Strength",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n = int(input())\n        l = sorted((map(int, input().split())))\n        ans, mn = 0, float('inf')\n        for j in range(n-1, -1, -1):\n            mn = min(l[j], mn)\n            ans = max(ans, mn*(n-j))\n        print(ans)\nif __name__ == \"__main__\":",
        "detail": "Table_Strength",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "tempCodeRunnerFile",
        "description": "tempCodeRunnerFile",
        "peekOfCode": "i = j = None\n    class E:\n        nonlocal i, j\n        for i, j in dicctionary.items():\n            print(i, j)\n            locals()[i] = j\n        def __init__(self) -> None:\n            x = 10\n            print(locals()['self'])\n    val = E.value1",
        "detail": "tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "Test",
        "description": "Test",
        "peekOfCode": "def factorial(x):\ni = 1\nmz = 0\ntry:\n    c = 0\n    while len(str(i)) < 4300:\n        print(c, len(str(i)))\n        mx = i\n        i *= 2\n        c += 1",
        "detail": "Test",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "Test",
        "description": "Test",
        "peekOfCode": "i = 1\nmz = 0\ntry:\n    c = 0\n    while len(str(i)) < 4300:\n        print(c, len(str(i)))\n        mx = i\n        i *= 2\n        c += 1\nexcept Exception as e:",
        "detail": "Test",
        "documentation": {}
    },
    {
        "label": "mz",
        "kind": 5,
        "importPath": "Test",
        "description": "Test",
        "peekOfCode": "mz = 0\ntry:\n    c = 0\n    while len(str(i)) < 4300:\n        print(c, len(str(i)))\n        mx = i\n        i *= 2\n        c += 1\nexcept Exception as e:\n    print(e)",
        "detail": "Test",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "The_Undisappearance",
        "description": "The_Undisappearance",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL(Counter)\n    @cache\n    def dp(ind=0, a=l[1], b=l[2], c=l[3]):\n        if ind == n:\n            return 0",
        "detail": "The_Undisappearance",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "The_Undisappearance",
        "description": "The_Undisappearance",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL(Counter)\n    @cache\n    def dp(ind=0, a=l[1], b=l[2], c=l[3]):\n        if ind == n:\n            return 0\n        else:",
        "detail": "The_Undisappearance",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "The_Undisappearance",
        "description": "The_Undisappearance",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL(Counter)\n    @cache\n    def dp(ind=0, a=l[1], b=l[2], c=l[3]):\n        if ind == n:\n            return 0\n        else:\n            ans, c = dp(ind+1), Counter()",
        "detail": "The_Undisappearance",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "The_Undisappearance",
        "description": "The_Undisappearance",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, l = II(), GL(Counter)\n    @cache\n    def dp(ind=0, a=l[1], b=l[2], c=l[3]):\n        if ind == n:\n            return 0\n        else:\n            ans, c = dp(ind+1), Counter()\n            for i in range(ind, n):",
        "detail": "The_Undisappearance",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "The_Undisappearance",
        "description": "The_Undisappearance",
        "peekOfCode": "def Solve():\n    n, l = II(), GL(Counter)\n    @cache\n    def dp(ind=0, a=l[1], b=l[2], c=l[3]):\n        if ind == n:\n            return 0\n        else:\n            ans, c = dp(ind+1), Counter()\n            for i in range(ind, n):\n                c[i]",
        "detail": "The_Undisappearance",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "The_Undisappearance",
        "description": "The_Undisappearance",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL(Counter)\n    @cache\n    def dp(ind=0, a=l[1], b=l[2], c=l[3]):",
        "detail": "The_Undisappearance",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Triangle_Count_Easy",
        "description": "Triangle_Count_Easy",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL(rtype=sorted)\n    def f(n1, n2):\n        # print(n1, n2, n1+n2-1, n2-n1)\n        return [n2-n1+1, n1+n2]\n    ans = []",
        "detail": "Triangle_Count_Easy",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Triangle_Count_Easy",
        "description": "Triangle_Count_Easy",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL(rtype=sorted)\n    def f(n1, n2):\n        # print(n1, n2, n1+n2-1, n2-n1)\n        return [n2-n1+1, n1+n2]\n    ans = []\n    for i in range(n-1):",
        "detail": "Triangle_Count_Easy",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Triangle_Count_Easy",
        "description": "Triangle_Count_Easy",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL(rtype=sorted)\n    def f(n1, n2):\n        # print(n1, n2, n1+n2-1, n2-n1)\n        return [n2-n1+1, n1+n2]\n    ans = []\n    for i in range(n-1):\n        s = f(l[i], l[i+1])",
        "detail": "Triangle_Count_Easy",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Triangle_Count_Easy",
        "description": "Triangle_Count_Easy",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, l = II(), GL(rtype=sorted)\n    def f(n1, n2):\n        # print(n1, n2, n1+n2-1, n2-n1)\n        return [n2-n1+1, n1+n2]\n    ans = []\n    for i in range(n-1):\n        s = f(l[i], l[i+1])\n        # print(l[i], l[i+1], s)",
        "detail": "Triangle_Count_Easy",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Triangle_Count_Easy",
        "description": "Triangle_Count_Easy",
        "peekOfCode": "def Solve():\n    n, l = II(), GL(rtype=sorted)\n    def f(n1, n2):\n        # print(n1, n2, n1+n2-1, n2-n1)\n        return [n2-n1+1, n1+n2]\n    ans = []\n    for i in range(n-1):\n        s = f(l[i], l[i+1])\n        # print(l[i], l[i+1], s)\n        ans += [s]",
        "detail": "Triangle_Count_Easy",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Triangle_Count_Easy",
        "description": "Triangle_Count_Easy",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, l = II(), GL(rtype=sorted)\n    def f(n1, n2):\n        # print(n1, n2, n1+n2-1, n2-n1)",
        "detail": "Triangle_Count_Easy",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Truth_Teller_And_Liars_101",
        "description": "Truth_Teller_And_Liars_101",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    print(a+b if a > b else -1)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "Truth_Teller_And_Liars_101",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Truth_Teller_And_Liars_101",
        "description": "Truth_Teller_And_Liars_101",
        "peekOfCode": "def GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    print(a+b if a > b else -1)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Truth_Teller_And_Liars_101",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Truth_Teller_And_Liars_101",
        "description": "Truth_Teller_And_Liars_101",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    print(a+b if a > b else -1)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Truth_Teller_And_Liars_101",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Truth_Teller_And_Liars_101",
        "description": "Truth_Teller_And_Liars_101",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    a, b = M()\n    print(a+b if a > b else -1)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Truth_Teller_And_Liars_101",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Truth_Teller_And_Liars_101",
        "description": "Truth_Teller_And_Liars_101",
        "peekOfCode": "def Solve():\n    a, b = M()\n    print(a+b if a > b else -1)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        Solve()",
        "detail": "Truth_Teller_And_Liars_101",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Truth_Teller_And_Liars_101",
        "description": "Truth_Teller_And_Liars_101",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(type=int): return list(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    a, b = M()\n    print(a+b if a > b else -1)\n    pass",
        "detail": "Truth_Teller_And_Liars_101",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "twoknights",
        "description": "twoknights",
        "peekOfCode": "def f(num):\n    n, ans, exist = num*num, 0, lambda x, y: x >= 0 and y >= 0 and x < num and y < num\n    d = {1:0,\n         2:12,\n         3:56,\n         4:192,}\n    if i in d:return d[i]\n    def g(i, j):\n        count = 1\n        for x, y in d:",
        "detail": "twoknights",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "twoknights",
        "description": "twoknights",
        "peekOfCode": "d = [(-2, -1), (-1, -2), (-2, 1), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\ndef f(num):\n    n, ans, exist = num*num, 0, lambda x, y: x >= 0 and y >= 0 and x < num and y < num\n    d = {1:0,\n         2:12,\n         3:56,\n         4:192,}\n    if i in d:return d[i]\n    def g(i, j):\n        count = 1",
        "detail": "twoknights",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "twoknights",
        "description": "twoknights",
        "peekOfCode": "n = int(input)\nfor i in range(1, n+1):\n    print(f(i))",
        "detail": "twoknights",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "Seieve",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    return [ind for ind, i in enumerate(prime) if i][2:]",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "getBits",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def getBits(n):\n    c, l = 0, []\n    while n:\n        if n & 1:\n            l.append(c)\n        n >>= 1\n        c += 1\n    return l\ndef exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def exists(nums):\n    return lambda x, y: x >= 0 and y >= 0 and x < len(nums) and y < len(nums[i])\ndef BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "BE",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def BE(b, e, mod=mod):\n    b %= mod\n    res = 1\n    while e:\n        if e & 1:\n            res = (res * b) % mod\n        b = (b * b) % mod\n        e >>= 1\n    return res\n@cache",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "fact",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def fact(n): return 1 if n <= 1 else (n * fact(n - 1) % mod)\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    mn, mx = 0, 0\n    for ind, i in enumerate(l):\n        if l[mn] > i:",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    mn, mx = 0, 0\n    for ind, i in enumerate(l):\n        if l[mn] > i:\n            mn = ind",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    mn, mx = 0, 0\n    for ind, i in enumerate(l):\n        if l[mn] > i:\n            mn = ind\n        if l[mx] < i:",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def II(): return int(I())\ndef p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    mn, mx = 0, 0\n    for ind, i in enumerate(l):\n        if l[mn] > i:\n            mn = ind\n        if l[mx] < i:\n            mx = ind",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def p(*args): print(*args)\ndef Solve():\n    n, l = II(), GL()\n    mn, mx = 0, 0\n    for ind, i in enumerate(l):\n        if l[mn] > i:\n            mn = ind\n        if l[mx] < i:\n            mx = ind\n    if mx < mn:",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "def Solve():\n    n, l = II(), GL()\n    mn, mx = 0, 0\n    for ind, i in enumerate(l):\n        if l[mn] > i:\n            mn = ind\n        if l[mx] < i:\n            mx = ind\n    if mx < mn:\n        print(-1)",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Unmedian",
        "description": "Unmedian",
        "peekOfCode": "mod = 10**9+7\ndef gcd(x, y): return (y) if x == 0 else gcd(y % x, x)\ndef Seieve(n):\n    prime, i = [True] * (n + 1), 2\n    l = []\n    while i * i <= n:\n        if prime[i]:\n            l.append(i)\n            for j in range(i * i, n + 1, i):\n                prime[j] = False",
        "detail": "Unmedian",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 2,
        "importPath": "Xometry_Easy_Version",
        "description": "Xometry_Easy_Version",
        "peekOfCode": "def M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, lis = II(), GL()\n    d = defaultdict(list)\n    for i in range(n):\n        for j in range(i+1, n):\n            d[lis[i] ^ lis[j]].append((i, j))",
        "detail": "Xometry_Easy_Version",
        "documentation": {}
    },
    {
        "label": "GL",
        "kind": 2,
        "importPath": "Xometry_Easy_Version",
        "description": "Xometry_Easy_Version",
        "peekOfCode": "def GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, lis = II(), GL()\n    d = defaultdict(list)\n    for i in range(n):\n        for j in range(i+1, n):\n            d[lis[i] ^ lis[j]].append((i, j))\n    print(d)",
        "detail": "Xometry_Easy_Version",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 2,
        "importPath": "Xometry_Easy_Version",
        "description": "Xometry_Easy_Version",
        "peekOfCode": "def I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, lis = II(), GL()\n    d = defaultdict(list)\n    for i in range(n):\n        for j in range(i+1, n):\n            d[lis[i] ^ lis[j]].append((i, j))\n    print(d)\n    pass",
        "detail": "Xometry_Easy_Version",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 2,
        "importPath": "Xometry_Easy_Version",
        "description": "Xometry_Easy_Version",
        "peekOfCode": "def II(): return int(I())\ndef Solve():\n    n, lis = II(), GL()\n    d = defaultdict(list)\n    for i in range(n):\n        for j in range(i+1, n):\n            d[lis[i] ^ lis[j]].append((i, j))\n    print(d)\n    pass\nif __name__ == \"__main__\":",
        "detail": "Xometry_Easy_Version",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "Xometry_Easy_Version",
        "description": "Xometry_Easy_Version",
        "peekOfCode": "def Solve():\n    n, lis = II(), GL()\n    d = defaultdict(list)\n    for i in range(n):\n        for j in range(i+1, n):\n            d[lis[i] ^ lis[j]].append((i, j))\n    print(d)\n    pass\nif __name__ == \"__main__\":\n    for i in range(int(input())):",
        "detail": "Xometry_Easy_Version",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "Xometry_Easy_Version",
        "description": "Xometry_Easy_Version",
        "peekOfCode": "mod = 10**9+7\ndef M(type=int): return (map(type, input().split()))\ndef GL(rtype=list, type=int): return rtype(map(type, input().split()))\ndef I(): return input()\ndef II(): return int(I())\ndef Solve():\n    n, lis = II(), GL()\n    d = defaultdict(list)\n    for i in range(n):\n        for j in range(i+1, n):",
        "detail": "Xometry_Easy_Version",
        "documentation": {}
    }
]